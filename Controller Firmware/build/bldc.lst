ARM GAS  /tmp/ccTkPZjh.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"bldc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/bldc.c"
  18              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
  19              		.align	1
  20              		.global	DMA1_Channel1_IRQHandler
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	DMA1_Channel1_IRQHandler:
  26              	.LFB66:
   1:Src/bldc.c    **** /*
   2:Src/bldc.c    **** * This file implements FOC motor control.
   3:Src/bldc.c    **** * This control method offers superior performanace
   4:Src/bldc.c    **** * compared to previous cummutation method. The new method features:
   5:Src/bldc.c    **** * ► reduced noise and vibrations
   6:Src/bldc.c    **** * ► smooth torque output
   7:Src/bldc.c    **** * ► improved motor efficiency -> lower energy consumption
   8:Src/bldc.c    **** *
   9:Src/bldc.c    **** * Copyright (C) 2019-2020 Emanuel FERU <aerdronix@gmail.com>
  10:Src/bldc.c    **** *
  11:Src/bldc.c    **** * This program is free software: you can redistribute it and/or modify
  12:Src/bldc.c    **** * it under the terms of the GNU General Public License as published by
  13:Src/bldc.c    **** * the Free Software Foundation, either version 3 of the License, or
  14:Src/bldc.c    **** * (at your option) any later version.
  15:Src/bldc.c    **** *
  16:Src/bldc.c    **** * This program is distributed in the hope that it will be useful,
  17:Src/bldc.c    **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  18:Src/bldc.c    **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  19:Src/bldc.c    **** * GNU General Public License for more details.
  20:Src/bldc.c    **** *
  21:Src/bldc.c    **** * You should have received a copy of the GNU General Public License
  22:Src/bldc.c    **** * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  23:Src/bldc.c    **** */
  24:Src/bldc.c    **** 
  25:Src/bldc.c    **** #include "stm32f1xx_hal.h"
  26:Src/bldc.c    **** #include "defines.h"
  27:Src/bldc.c    **** #include "setup.h"
  28:Src/bldc.c    **** #include "config.h"
  29:Src/bldc.c    **** #include "util.h"
  30:Src/bldc.c    **** 
  31:Src/bldc.c    **** // Matlab includes and defines - from auto-code generation
  32:Src/bldc.c    **** // ###############################################################################
ARM GAS  /tmp/ccTkPZjh.s 			page 2


  33:Src/bldc.c    **** #include "BLDC_controller.h"           /* Model's header file */
  34:Src/bldc.c    **** #include "rtwtypes.h"
  35:Src/bldc.c    **** 
  36:Src/bldc.c    **** extern RT_MODEL *const rtM_Left;
  37:Src/bldc.c    **** extern RT_MODEL *const rtM_Right;
  38:Src/bldc.c    **** 
  39:Src/bldc.c    **** extern DW   rtDW_Left;                  /* Observable states */
  40:Src/bldc.c    **** extern ExtU rtU_Left;                   /* External inputs */
  41:Src/bldc.c    **** extern ExtY rtY_Left;                   /* External outputs */
  42:Src/bldc.c    **** extern P    rtP_Left;
  43:Src/bldc.c    **** 
  44:Src/bldc.c    **** extern DW   rtDW_Right;                 /* Observable states */
  45:Src/bldc.c    **** extern ExtU rtU_Right;                  /* External inputs */
  46:Src/bldc.c    **** extern ExtY rtY_Right;                  /* External outputs */
  47:Src/bldc.c    **** // ###############################################################################
  48:Src/bldc.c    **** 
  49:Src/bldc.c    **** static int16_t pwm_margin;              /* This margin allows to have a window in the PWM signal fo
  50:Src/bldc.c    **** 
  51:Src/bldc.c    **** extern uint8_t ctrlModReq;
  52:Src/bldc.c    **** static int16_t curDC_max = (I_DC_MAX * A2BIT_CONV);
  53:Src/bldc.c    **** int16_t curL_phaA = 0, curL_phaB = 0, curL_DC = 0;
  54:Src/bldc.c    **** int16_t curR_phaB = 0, curR_phaC = 0, curR_DC = 0;
  55:Src/bldc.c    **** 
  56:Src/bldc.c    **** volatile int pwml = 0;
  57:Src/bldc.c    **** volatile int pwmr = 0;
  58:Src/bldc.c    **** 
  59:Src/bldc.c    **** extern volatile adc_buf_t adc_buffer;
  60:Src/bldc.c    **** 
  61:Src/bldc.c    **** uint8_t buzzerFreq          = 0;
  62:Src/bldc.c    **** uint8_t buzzerPattern       = 0;
  63:Src/bldc.c    **** uint8_t buzzerCount         = 0;
  64:Src/bldc.c    **** volatile uint32_t buzzerTimer = 0;
  65:Src/bldc.c    **** static uint8_t  buzzerPrev  = 0;
  66:Src/bldc.c    **** static uint8_t  buzzerIdx   = 0;
  67:Src/bldc.c    **** 
  68:Src/bldc.c    **** uint8_t        enable       = 0;        // initially motors are disabled for SAFETY
  69:Src/bldc.c    **** static uint8_t enableFin    = 0;
  70:Src/bldc.c    **** 
  71:Src/bldc.c    **** static const uint16_t pwm_res  = 64000000 / 2 / PWM_FREQ; // = 2000
  72:Src/bldc.c    **** 
  73:Src/bldc.c    **** static uint16_t offsetcount = 0;
  74:Src/bldc.c    **** static int16_t offsetrlA    = 2000;
  75:Src/bldc.c    **** static int16_t offsetrlB    = 2000;
  76:Src/bldc.c    **** static int16_t offsetrrB    = 2000;
  77:Src/bldc.c    **** static int16_t offsetrrC    = 2000;
  78:Src/bldc.c    **** static int16_t offsetdcl    = 2000;
  79:Src/bldc.c    **** static int16_t offsetdcr    = 2000;
  80:Src/bldc.c    **** 
  81:Src/bldc.c    **** int16_t        batVoltage       = (400 * BAT_CELLS * BAT_CALIB_ADC) / BAT_CALIB_REAL_VOLTAGE;
  82:Src/bldc.c    **** static int32_t batVoltageFixdt  = (400 * BAT_CELLS * BAT_CALIB_ADC) / BAT_CALIB_REAL_VOLTAGE << 16;
  83:Src/bldc.c    **** 
  84:Src/bldc.c    **** // =================================
  85:Src/bldc.c    **** // DMA interrupt frequency =~ 16 kHz
  86:Src/bldc.c    **** // =================================
  87:Src/bldc.c    **** void DMA1_Channel1_IRQHandler(void) {
  27              		.loc 1 87 37 view -0
  28              		.cfi_startproc
ARM GAS  /tmp/ccTkPZjh.s 			page 3


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  88:Src/bldc.c    **** 
  89:Src/bldc.c    ****   DMA1->IFCR = DMA_IFCR_CTCIF1;
  31              		.loc 1 89 3 view .LVU1
  32              		.loc 1 89 14 is_stmt 0 view .LVU2
  33 0000 994B     		ldr	r3, .L46
  34 0002 0222     		movs	r2, #2
  35 0004 5A60     		str	r2, [r3, #4]
  90:Src/bldc.c    ****   // HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);
  91:Src/bldc.c    ****   // HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
  92:Src/bldc.c    **** 
  93:Src/bldc.c    ****   if(offsetcount < 2000) {  // calibrate ADC offsets
  36              		.loc 1 93 3 is_stmt 1 view .LVU3
  37              		.loc 1 93 18 is_stmt 0 view .LVU4
  38 0006 994B     		ldr	r3, .L46+4
  39 0008 1B88     		ldrh	r3, [r3]
  40              		.loc 1 93 5 view .LVU5
  41 000a B3F5FA6F 		cmp	r3, #2000
  42 000e C0F0A080 		bcc	.L42
  87:Src/bldc.c    **** 
  43              		.loc 1 87 37 view .LVU6
  44 0012 10B5     		push	{r4, lr}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 14, -4
  94:Src/bldc.c    ****     offsetcount++;
  95:Src/bldc.c    ****     offsetrlA = (adc_buffer.rlA + offsetrlA) / 2;
  96:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
  97:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
  98:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
  99:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 100:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 101:Src/bldc.c    ****     return;
 102:Src/bldc.c    ****   }
 103:Src/bldc.c    **** 
 104:Src/bldc.c    ****   if (buzzerTimer % 1000 == 0) {  // Filter battery voltage at a slower sampling rate
  49              		.loc 1 104 3 is_stmt 1 view .LVU7
  50              		.loc 1 104 19 is_stmt 0 view .LVU8
  51 0014 964B     		ldr	r3, .L46+8
  52 0016 1A68     		ldr	r2, [r3]
  53 0018 964B     		ldr	r3, .L46+12
  54 001a A3FB0213 		umull	r1, r3, r3, r2
  55 001e 9B09     		lsrs	r3, r3, #6
  56 0020 4FF47A71 		mov	r1, #1000
  57 0024 01FB1323 		mls	r3, r1, r3, r2
  58              		.loc 1 104 6 view .LVU9
  59 0028 002B     		cmp	r3, #0
  60 002a 00F0D380 		beq	.L43
  61              	.L4:
 105:Src/bldc.c    ****     filtLowPass32(adc_buffer.batt1, BAT_FILT_COEF, &batVoltageFixdt);
 106:Src/bldc.c    ****     batVoltage = (int16_t)(batVoltageFixdt >> 16);  // convert fixed-point to integer
 107:Src/bldc.c    ****   }
 108:Src/bldc.c    **** 
 109:Src/bldc.c    ****   // Get Left motor currents
 110:Src/bldc.c    ****   curL_phaA = (int16_t)(offsetrlA - adc_buffer.rlA);
ARM GAS  /tmp/ccTkPZjh.s 			page 4


  62              		.loc 1 110 3 is_stmt 1 view .LVU10
  63              		.loc 1 110 47 is_stmt 0 view .LVU11
  64 002e 924B     		ldr	r3, .L46+16
  65 0030 9988     		ldrh	r1, [r3, #4]
  66 0032 89B2     		uxth	r1, r1
  67              		.loc 1 110 35 view .LVU12
  68 0034 914A     		ldr	r2, .L46+20
  69 0036 1288     		ldrh	r2, [r2]
  70 0038 521A     		subs	r2, r2, r1
  71              		.loc 1 110 13 view .LVU13
  72 003a 9149     		ldr	r1, .L46+24
  73 003c 0A80     		strh	r2, [r1]	@ movhi
 111:Src/bldc.c    ****   curL_phaB = (int16_t)(offsetrlB - adc_buffer.rlB);
  74              		.loc 1 111 3 is_stmt 1 view .LVU14
  75              		.loc 1 111 47 is_stmt 0 view .LVU15
  76 003e D988     		ldrh	r1, [r3, #6]
  77 0040 89B2     		uxth	r1, r1
  78              		.loc 1 111 35 view .LVU16
  79 0042 904A     		ldr	r2, .L46+28
  80 0044 1288     		ldrh	r2, [r2]
  81 0046 521A     		subs	r2, r2, r1
  82              		.loc 1 111 13 view .LVU17
  83 0048 8F49     		ldr	r1, .L46+32
  84 004a 0A80     		strh	r2, [r1]	@ movhi
 112:Src/bldc.c    ****   curL_DC   = (int16_t)(offsetdcl - adc_buffer.dcl);
  85              		.loc 1 112 3 is_stmt 1 view .LVU18
  86              		.loc 1 112 47 is_stmt 0 view .LVU19
  87 004c 5988     		ldrh	r1, [r3, #2]
  88 004e 89B2     		uxth	r1, r1
  89              		.loc 1 112 35 view .LVU20
  90 0050 8E4A     		ldr	r2, .L46+36
  91 0052 1288     		ldrh	r2, [r2]
  92 0054 521A     		subs	r2, r2, r1
  93              		.loc 1 112 15 view .LVU21
  94 0056 12B2     		sxth	r2, r2
  95              		.loc 1 112 13 view .LVU22
  96 0058 8D49     		ldr	r1, .L46+40
  97 005a 0A80     		strh	r2, [r1]	@ movhi
 113:Src/bldc.c    ****   
 114:Src/bldc.c    ****   // Get Right motor currents
 115:Src/bldc.c    ****   curR_phaB = (int16_t)(offsetrrB - adc_buffer.rrB);
  98              		.loc 1 115 3 is_stmt 1 view .LVU23
  99              		.loc 1 115 47 is_stmt 0 view .LVU24
 100 005c 1889     		ldrh	r0, [r3, #8]
 101 005e 80B2     		uxth	r0, r0
 102              		.loc 1 115 35 view .LVU25
 103 0060 8C49     		ldr	r1, .L46+44
 104 0062 0988     		ldrh	r1, [r1]
 105 0064 091A     		subs	r1, r1, r0
 106              		.loc 1 115 13 view .LVU26
 107 0066 8C48     		ldr	r0, .L46+48
 108 0068 0180     		strh	r1, [r0]	@ movhi
 116:Src/bldc.c    ****   curR_phaC = (int16_t)(offsetrrC - adc_buffer.rrC);
 109              		.loc 1 116 3 is_stmt 1 view .LVU27
 110              		.loc 1 116 47 is_stmt 0 view .LVU28
 111 006a 5889     		ldrh	r0, [r3, #10]
 112 006c 80B2     		uxth	r0, r0
ARM GAS  /tmp/ccTkPZjh.s 			page 5


 113              		.loc 1 116 35 view .LVU29
 114 006e 8B49     		ldr	r1, .L46+52
 115 0070 0988     		ldrh	r1, [r1]
 116 0072 091A     		subs	r1, r1, r0
 117              		.loc 1 116 13 view .LVU30
 118 0074 8A48     		ldr	r0, .L46+56
 119 0076 0180     		strh	r1, [r0]	@ movhi
 117:Src/bldc.c    ****   curR_DC   = (int16_t)(offsetdcr - adc_buffer.dcr);
 120              		.loc 1 117 3 is_stmt 1 view .LVU31
 121              		.loc 1 117 47 is_stmt 0 view .LVU32
 122 0078 1988     		ldrh	r1, [r3]
 123 007a 89B2     		uxth	r1, r1
 124              		.loc 1 117 35 view .LVU33
 125 007c 894B     		ldr	r3, .L46+60
 126 007e 1B88     		ldrh	r3, [r3]
 127 0080 5B1A     		subs	r3, r3, r1
 128              		.loc 1 117 15 view .LVU34
 129 0082 1BB2     		sxth	r3, r3
 130              		.loc 1 117 13 view .LVU35
 131 0084 8849     		ldr	r1, .L46+64
 132 0086 0B80     		strh	r3, [r1]	@ movhi
 118:Src/bldc.c    **** 
 119:Src/bldc.c    ****   // Disable PWM when current limit is reached (current chopping)
 120:Src/bldc.c    ****   // This is the Level 2 of current protection. The Level 1 should kick in first given by I_MOT_MAX
 121:Src/bldc.c    ****   if(ABS(curL_DC) > curDC_max || enable == 0) {
 133              		.loc 1 121 3 is_stmt 1 view .LVU36
 134              		.loc 1 121 6 is_stmt 0 view .LVU37
 135 0088 002A     		cmp	r2, #0
 136 008a B8BF     		it	lt
 137 008c 5242     		rsblt	r2, r2, #0
 138 008e 92B2     		uxth	r2, r2
 139              		.loc 1 121 5 view .LVU38
 140 0090 40F25231 		movw	r1, #850
 141 0094 8A42     		cmp	r2, r1
 142 0096 04D8     		bhi	.L5
 143              		.loc 1 121 41 discriminator 1 view .LVU39
 144 0098 844A     		ldr	r2, .L46+68
 145 009a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 146              		.loc 1 121 31 discriminator 1 view .LVU40
 147 009c 002A     		cmp	r2, #0
 148 009e 40F0A780 		bne	.L6
 149              	.L5:
 122:Src/bldc.c    ****     LEFT_TIM->BDTR &= ~TIM_BDTR_MOE;
 150              		.loc 1 122 5 is_stmt 1 view .LVU41
 151              		.loc 1 122 13 is_stmt 0 view .LVU42
 152 00a2 8349     		ldr	r1, .L46+72
 153 00a4 4A6C     		ldr	r2, [r1, #68]
 154              		.loc 1 122 20 view .LVU43
 155 00a6 22F40042 		bic	r2, r2, #32768
 156 00aa 4A64     		str	r2, [r1, #68]
 157              	.L7:
 123:Src/bldc.c    ****   } else {
 124:Src/bldc.c    ****     LEFT_TIM->BDTR |= TIM_BDTR_MOE;
 125:Src/bldc.c    ****   }
 126:Src/bldc.c    **** 
 127:Src/bldc.c    ****   if(ABS(curR_DC)  > curDC_max || enable == 0) {
 158              		.loc 1 127 3 is_stmt 1 view .LVU44
ARM GAS  /tmp/ccTkPZjh.s 			page 6


 159              		.loc 1 127 6 is_stmt 0 view .LVU45
 160 00ac 002B     		cmp	r3, #0
 161 00ae B8BF     		it	lt
 162 00b0 5B42     		rsblt	r3, r3, #0
 163 00b2 9BB2     		uxth	r3, r3
 164              		.loc 1 127 5 view .LVU46
 165 00b4 40F25232 		movw	r2, #850
 166 00b8 9342     		cmp	r3, r2
 167 00ba 04D8     		bhi	.L8
 168              		.loc 1 127 42 discriminator 1 view .LVU47
 169 00bc 7B4B     		ldr	r3, .L46+68
 170 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 171              		.loc 1 127 32 discriminator 1 view .LVU48
 172 00c0 002B     		cmp	r3, #0
 173 00c2 40F09B80 		bne	.L9
 174              	.L8:
 128:Src/bldc.c    ****     RIGHT_TIM->BDTR &= ~TIM_BDTR_MOE;
 175              		.loc 1 128 5 is_stmt 1 view .LVU49
 176              		.loc 1 128 14 is_stmt 0 view .LVU50
 177 00c6 7B4A     		ldr	r2, .L46+76
 178 00c8 536C     		ldr	r3, [r2, #68]
 179              		.loc 1 128 21 view .LVU51
 180 00ca 23F40043 		bic	r3, r3, #32768
 181 00ce 5364     		str	r3, [r2, #68]
 182              	.L10:
 129:Src/bldc.c    ****   } else {
 130:Src/bldc.c    ****     RIGHT_TIM->BDTR |= TIM_BDTR_MOE;
 131:Src/bldc.c    ****   }
 132:Src/bldc.c    **** 
 133:Src/bldc.c    ****   // Create square wave for buzzer
 134:Src/bldc.c    ****   buzzerTimer++;
 183              		.loc 1 134 3 is_stmt 1 view .LVU52
 184              		.loc 1 134 14 is_stmt 0 view .LVU53
 185 00d0 674A     		ldr	r2, .L46+8
 186 00d2 1368     		ldr	r3, [r2]
 187 00d4 0133     		adds	r3, r3, #1
 188 00d6 1360     		str	r3, [r2]
 135:Src/bldc.c    ****   if (buzzerFreq != 0 && (buzzerTimer / 5000) % (buzzerPattern + 1) == 0) {
 189              		.loc 1 135 3 is_stmt 1 view .LVU54
 190              		.loc 1 135 18 is_stmt 0 view .LVU55
 191 00d8 774B     		ldr	r3, .L46+80
 192 00da 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 193              		.loc 1 135 6 view .LVU56
 194 00dc 002A     		cmp	r2, #0
 195 00de 00F09380 		beq	.L11
 196              		.loc 1 135 39 discriminator 1 view .LVU57
 197 00e2 634B     		ldr	r3, .L46+8
 198 00e4 1B68     		ldr	r3, [r3]
 199 00e6 7549     		ldr	r1, .L46+84
 200 00e8 A1FB0313 		umull	r1, r3, r1, r3
 201 00ec 1B0B     		lsrs	r3, r3, #12
 202              		.loc 1 135 64 discriminator 1 view .LVU58
 203 00ee 7449     		ldr	r1, .L46+88
 204 00f0 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 205 00f2 0131     		adds	r1, r1, #1
 206              		.loc 1 135 47 discriminator 1 view .LVU59
 207 00f4 B3FBF1F0 		udiv	r0, r3, r1
ARM GAS  /tmp/ccTkPZjh.s 			page 7


 208 00f8 01FB1033 		mls	r3, r1, r0, r3
 209              		.loc 1 135 23 discriminator 1 view .LVU60
 210 00fc 002B     		cmp	r3, #0
 211 00fe 40F08380 		bne	.L11
 136:Src/bldc.c    ****     if (buzzerPrev == 0) {
 212              		.loc 1 136 5 is_stmt 1 view .LVU61
 213              		.loc 1 136 20 is_stmt 0 view .LVU62
 214 0102 704B     		ldr	r3, .L46+92
 215 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 216              		.loc 1 136 8 view .LVU63
 217 0106 7BB9     		cbnz	r3, .L12
 137:Src/bldc.c    ****       buzzerPrev = 1;
 218              		.loc 1 137 7 is_stmt 1 view .LVU64
 219              		.loc 1 137 18 is_stmt 0 view .LVU65
 220 0108 6E4B     		ldr	r3, .L46+92
 221 010a 0121     		movs	r1, #1
 222 010c 1970     		strb	r1, [r3]
 138:Src/bldc.c    ****       if (++buzzerIdx > (buzzerCount + 2)) {    // pause 2 periods
 223              		.loc 1 138 7 is_stmt 1 view .LVU66
 224              		.loc 1 138 11 is_stmt 0 view .LVU67
 225 010e 6E49     		ldr	r1, .L46+96
 226 0110 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 227 0112 0133     		adds	r3, r3, #1
 228 0114 DBB2     		uxtb	r3, r3
 229              		.loc 1 138 10 view .LVU68
 230 0116 0B70     		strb	r3, [r1]
 231              		.loc 1 138 38 view .LVU69
 232 0118 6C49     		ldr	r1, .L46+100
 233 011a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 234 011c 0231     		adds	r1, r1, #2
 235              		.loc 1 138 10 view .LVU70
 236 011e 8B42     		cmp	r3, r1
 237 0120 02DD     		ble	.L12
 139:Src/bldc.c    ****         buzzerIdx = 1;
 238              		.loc 1 139 9 is_stmt 1 view .LVU71
 239              		.loc 1 139 19 is_stmt 0 view .LVU72
 240 0122 694B     		ldr	r3, .L46+96
 241 0124 0121     		movs	r1, #1
 242 0126 1970     		strb	r1, [r3]
 243              	.L12:
 140:Src/bldc.c    ****       }
 141:Src/bldc.c    ****     }
 142:Src/bldc.c    ****     if (buzzerTimer % buzzerFreq == 0 && (buzzerIdx <= buzzerCount || buzzerCount == 0)) {
 244              		.loc 1 142 5 is_stmt 1 view .LVU73
 245              		.loc 1 142 21 is_stmt 0 view .LVU74
 246 0128 514B     		ldr	r3, .L46+8
 247 012a 1B68     		ldr	r3, [r3]
 248 012c B3FBF2F1 		udiv	r1, r3, r2
 249 0130 02FB1133 		mls	r3, r2, r1, r3
 250              		.loc 1 142 8 view .LVU75
 251 0134 002B     		cmp	r3, #0
 252 0136 6AD1     		bne	.L13
 253              		.loc 1 142 53 discriminator 1 view .LVU76
 254 0138 634B     		ldr	r3, .L46+96
 255 013a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 256 013c 634B     		ldr	r3, .L46+100
 257 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccTkPZjh.s 			page 8


 258              		.loc 1 142 39 discriminator 1 view .LVU77
 259 0140 9A42     		cmp	r2, r3
 260 0142 01D9     		bls	.L14
 261              		.loc 1 142 68 discriminator 2 view .LVU78
 262 0144 002B     		cmp	r3, #0
 263 0146 62D1     		bne	.L13
 264              	.L14:
 143:Src/bldc.c    ****       HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 265              		.loc 1 143 7 is_stmt 1 view .LVU79
 266 0148 1021     		movs	r1, #16
 267 014a 6148     		ldr	r0, .L46+104
 268 014c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 269              	.LVL0:
 270 0150 5DE0     		b	.L13
 271              	.L42:
 272              	.LCFI1:
 273              		.cfi_def_cfa_offset 0
 274              		.cfi_restore 4
 275              		.cfi_restore 14
  94:Src/bldc.c    ****     offsetrlA = (adc_buffer.rlA + offsetrlA) / 2;
 276              		.loc 1 94 5 view .LVU80
  94:Src/bldc.c    ****     offsetrlA = (adc_buffer.rlA + offsetrlA) / 2;
 277              		.loc 1 94 16 is_stmt 0 view .LVU81
 278 0152 0133     		adds	r3, r3, #1
 279 0154 454A     		ldr	r2, .L46+4
 280 0156 1380     		strh	r3, [r2]	@ movhi
  95:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
 281              		.loc 1 95 5 is_stmt 1 view .LVU82
  95:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
 282              		.loc 1 95 28 is_stmt 0 view .LVU83
 283 0158 474A     		ldr	r2, .L46+16
 284 015a 9188     		ldrh	r1, [r2, #4]
 285 015c 89B2     		uxth	r1, r1
  95:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
 286              		.loc 1 95 33 view .LVU84
 287 015e 4748     		ldr	r0, .L46+20
 288 0160 B0F90030 		ldrsh	r3, [r0]
 289 0164 0B44     		add	r3, r3, r1
  95:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
 290              		.loc 1 95 46 view .LVU85
 291 0166 03EBD373 		add	r3, r3, r3, lsr #31
 292 016a 5B10     		asrs	r3, r3, #1
  95:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
 293              		.loc 1 95 15 view .LVU86
 294 016c 0380     		strh	r3, [r0]	@ movhi
  96:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
 295              		.loc 1 96 5 is_stmt 1 view .LVU87
  96:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
 296              		.loc 1 96 28 is_stmt 0 view .LVU88
 297 016e D188     		ldrh	r1, [r2, #6]
 298 0170 89B2     		uxth	r1, r1
  96:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
 299              		.loc 1 96 33 view .LVU89
 300 0172 4448     		ldr	r0, .L46+28
 301 0174 B0F90030 		ldrsh	r3, [r0]
 302 0178 0B44     		add	r3, r3, r1
  96:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
ARM GAS  /tmp/ccTkPZjh.s 			page 9


 303              		.loc 1 96 46 view .LVU90
 304 017a 03EBD373 		add	r3, r3, r3, lsr #31
 305 017e 5B10     		asrs	r3, r3, #1
  96:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
 306              		.loc 1 96 15 view .LVU91
 307 0180 0380     		strh	r3, [r0]	@ movhi
  97:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
 308              		.loc 1 97 5 is_stmt 1 view .LVU92
  97:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
 309              		.loc 1 97 28 is_stmt 0 view .LVU93
 310 0182 1189     		ldrh	r1, [r2, #8]
 311 0184 89B2     		uxth	r1, r1
  97:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
 312              		.loc 1 97 33 view .LVU94
 313 0186 4348     		ldr	r0, .L46+44
 314 0188 B0F90030 		ldrsh	r3, [r0]
 315 018c 0B44     		add	r3, r3, r1
  97:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
 316              		.loc 1 97 46 view .LVU95
 317 018e 03EBD373 		add	r3, r3, r3, lsr #31
 318 0192 5B10     		asrs	r3, r3, #1
  97:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
 319              		.loc 1 97 15 view .LVU96
 320 0194 0380     		strh	r3, [r0]	@ movhi
  98:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 321              		.loc 1 98 5 is_stmt 1 view .LVU97
  98:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 322              		.loc 1 98 28 is_stmt 0 view .LVU98
 323 0196 5189     		ldrh	r1, [r2, #10]
 324 0198 89B2     		uxth	r1, r1
  98:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 325              		.loc 1 98 33 view .LVU99
 326 019a 4048     		ldr	r0, .L46+52
 327 019c B0F90030 		ldrsh	r3, [r0]
 328 01a0 0B44     		add	r3, r3, r1
  98:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 329              		.loc 1 98 46 view .LVU100
 330 01a2 03EBD373 		add	r3, r3, r3, lsr #31
 331 01a6 5B10     		asrs	r3, r3, #1
  98:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 332              		.loc 1 98 15 view .LVU101
 333 01a8 0380     		strh	r3, [r0]	@ movhi
  99:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 334              		.loc 1 99 5 is_stmt 1 view .LVU102
  99:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 335              		.loc 1 99 28 is_stmt 0 view .LVU103
 336 01aa 5188     		ldrh	r1, [r2, #2]
 337 01ac 89B2     		uxth	r1, r1
  99:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 338              		.loc 1 99 33 view .LVU104
 339 01ae 3748     		ldr	r0, .L46+36
 340 01b0 B0F90030 		ldrsh	r3, [r0]
 341 01b4 0B44     		add	r3, r3, r1
  99:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 342              		.loc 1 99 46 view .LVU105
 343 01b6 03EBD373 		add	r3, r3, r3, lsr #31
 344 01ba 5B10     		asrs	r3, r3, #1
ARM GAS  /tmp/ccTkPZjh.s 			page 10


  99:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 345              		.loc 1 99 15 view .LVU106
 346 01bc 0380     		strh	r3, [r0]	@ movhi
 100:Src/bldc.c    ****     return;
 347              		.loc 1 100 5 is_stmt 1 view .LVU107
 100:Src/bldc.c    ****     return;
 348              		.loc 1 100 28 is_stmt 0 view .LVU108
 349 01be 1288     		ldrh	r2, [r2]
 350 01c0 92B2     		uxth	r2, r2
 100:Src/bldc.c    ****     return;
 351              		.loc 1 100 33 view .LVU109
 352 01c2 3849     		ldr	r1, .L46+60
 353 01c4 B1F90030 		ldrsh	r3, [r1]
 354 01c8 1344     		add	r3, r3, r2
 100:Src/bldc.c    ****     return;
 355              		.loc 1 100 46 view .LVU110
 356 01ca 03EBD373 		add	r3, r3, r3, lsr #31
 357 01ce 5B10     		asrs	r3, r3, #1
 100:Src/bldc.c    ****     return;
 358              		.loc 1 100 15 view .LVU111
 359 01d0 0B80     		strh	r3, [r1]	@ movhi
 101:Src/bldc.c    ****   }
 360              		.loc 1 101 5 is_stmt 1 view .LVU112
 361 01d2 7047     		bx	lr
 362              	.L43:
 363              	.LCFI2:
 364              		.cfi_def_cfa_offset 8
 365              		.cfi_offset 4, -8
 366              		.cfi_offset 14, -4
 105:Src/bldc.c    ****     batVoltage = (int16_t)(batVoltageFixdt >> 16);  // convert fixed-point to integer
 367              		.loc 1 105 5 view .LVU113
 105:Src/bldc.c    ****     batVoltage = (int16_t)(batVoltageFixdt >> 16);  // convert fixed-point to integer
 368              		.loc 1 105 29 is_stmt 0 view .LVU114
 369 01d4 284B     		ldr	r3, .L46+16
 370 01d6 9889     		ldrh	r0, [r3, #12]
 105:Src/bldc.c    ****     batVoltage = (int16_t)(batVoltageFixdt >> 16);  // convert fixed-point to integer
 371              		.loc 1 105 5 view .LVU115
 372 01d8 3E4C     		ldr	r4, .L46+108
 373 01da 2246     		mov	r2, r4
 374 01dc 40F28F21 		movw	r1, #655
 375 01e0 80B2     		uxth	r0, r0
 376 01e2 FFF7FEFF 		bl	filtLowPass32
 377              	.LVL1:
 106:Src/bldc.c    ****   }
 378              		.loc 1 106 5 is_stmt 1 view .LVU116
 106:Src/bldc.c    ****   }
 379              		.loc 1 106 18 is_stmt 0 view .LVU117
 380 01e6 B4F90220 		ldrsh	r2, [r4, #2]
 106:Src/bldc.c    ****   }
 381              		.loc 1 106 16 view .LVU118
 382 01ea 3B4B     		ldr	r3, .L46+112
 383 01ec 1A80     		strh	r2, [r3]	@ movhi
 384 01ee 1EE7     		b	.L4
 385              	.L6:
 124:Src/bldc.c    ****   }
 386              		.loc 1 124 5 is_stmt 1 view .LVU119
 124:Src/bldc.c    ****   }
ARM GAS  /tmp/ccTkPZjh.s 			page 11


 387              		.loc 1 124 13 is_stmt 0 view .LVU120
 388 01f0 2F49     		ldr	r1, .L46+72
 389 01f2 4A6C     		ldr	r2, [r1, #68]
 124:Src/bldc.c    ****   }
 390              		.loc 1 124 20 view .LVU121
 391 01f4 42F40042 		orr	r2, r2, #32768
 392 01f8 4A64     		str	r2, [r1, #68]
 393 01fa 57E7     		b	.L7
 394              	.L9:
 130:Src/bldc.c    ****   }
 395              		.loc 1 130 5 is_stmt 1 view .LVU122
 130:Src/bldc.c    ****   }
 396              		.loc 1 130 14 is_stmt 0 view .LVU123
 397 01fc 2D4A     		ldr	r2, .L46+76
 398 01fe 536C     		ldr	r3, [r2, #68]
 130:Src/bldc.c    ****   }
 399              		.loc 1 130 21 view .LVU124
 400 0200 43F40043 		orr	r3, r3, #32768
 401 0204 5364     		str	r3, [r2, #68]
 402 0206 63E7     		b	.L10
 403              	.L11:
 144:Src/bldc.c    ****     }
 145:Src/bldc.c    ****   } else if (buzzerPrev) {
 404              		.loc 1 145 10 is_stmt 1 view .LVU125
 405              		.loc 1 145 14 is_stmt 0 view .LVU126
 406 0208 2E4B     		ldr	r3, .L46+92
 407 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408              		.loc 1 145 13 view .LVU127
 409 020c FBB9     		cbnz	r3, .L44
 410              	.L13:
 146:Src/bldc.c    ****       HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 147:Src/bldc.c    ****       buzzerPrev = 0;
 148:Src/bldc.c    ****   }
 149:Src/bldc.c    **** 
 150:Src/bldc.c    ****   // Adjust pwm_margin depending on the selected Control Type
 151:Src/bldc.c    ****   if (rtP_Left.z_ctrlTypSel == FOC_CTRL) {
 411              		.loc 1 151 3 is_stmt 1 view .LVU128
 412              		.loc 1 151 15 is_stmt 0 view .LVU129
 413 020e 334B     		ldr	r3, .L46+116
 414 0210 93F8F930 		ldrb	r3, [r3, #249]	@ zero_extendqisi2
 415              		.loc 1 151 6 view .LVU130
 416 0214 022B     		cmp	r3, #2
 417 0216 23D0     		beq	.L45
 152:Src/bldc.c    ****     pwm_margin = 110;
 153:Src/bldc.c    ****   } else {
 154:Src/bldc.c    ****     pwm_margin = 0;
 418              		.loc 1 154 5 is_stmt 1 view .LVU131
 419              		.loc 1 154 16 is_stmt 0 view .LVU132
 420 0218 314B     		ldr	r3, .L46+120
 421 021a 0022     		movs	r2, #0
 422 021c 1A80     		strh	r2, [r3]	@ movhi
 423              	.L16:
 155:Src/bldc.c    ****   }
 156:Src/bldc.c    **** 
 157:Src/bldc.c    ****   // ############################### MOTOR CONTROL ###############################
 158:Src/bldc.c    **** 
 159:Src/bldc.c    ****   int ul, vl, wl;
ARM GAS  /tmp/ccTkPZjh.s 			page 12


 424              		.loc 1 159 3 is_stmt 1 view .LVU133
 160:Src/bldc.c    ****   int ur, vr, wr;
 425              		.loc 1 160 3 view .LVU134
 161:Src/bldc.c    ****   static boolean_T OverrunFlag = false;
 426              		.loc 1 161 3 view .LVU135
 162:Src/bldc.c    **** 
 163:Src/bldc.c    ****   /* Check for overrun */
 164:Src/bldc.c    ****   if (OverrunFlag) {
 427              		.loc 1 164 3 view .LVU136
 428              		.loc 1 164 7 is_stmt 0 view .LVU137
 429 021e 314B     		ldr	r3, .L46+124
 430 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431              		.loc 1 164 6 view .LVU138
 432 0222 002B     		cmp	r3, #0
 433 0224 40F00D81 		bne	.L1
 165:Src/bldc.c    ****     return;
 166:Src/bldc.c    ****   }
 167:Src/bldc.c    ****   OverrunFlag = true;
 434              		.loc 1 167 3 is_stmt 1 view .LVU139
 435              		.loc 1 167 15 is_stmt 0 view .LVU140
 436 0228 2E4B     		ldr	r3, .L46+124
 437 022a 0122     		movs	r2, #1
 438 022c 1A70     		strb	r2, [r3]
 168:Src/bldc.c    **** 
 169:Src/bldc.c    ****   /* Make sure to stop BOTH motors in case of an error */
 170:Src/bldc.c    ****   enableFin = enable && !rtY_Left.z_errCode && !rtY_Right.z_errCode;
 439              		.loc 1 170 3 is_stmt 1 view .LVU141
 440              		.loc 1 170 15 is_stmt 0 view .LVU142
 441 022e 1F4B     		ldr	r3, .L46+68
 442 0230 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 443              		.loc 1 170 45 view .LVU143
 444 0232 002B     		cmp	r3, #0
 445 0234 5CD0     		beq	.L36
 446              		.loc 1 170 34 discriminator 1 view .LVU144
 447 0236 2C4B     		ldr	r3, .L46+128
 448 0238 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 449              		.loc 1 170 22 discriminator 1 view .LVU145
 450 023a 002B     		cmp	r3, #0
 451 023c 40F00281 		bne	.L37
 452              		.loc 1 170 58 discriminator 3 view .LVU146
 453 0240 2A4B     		ldr	r3, .L46+132
 454 0242 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 455              		.loc 1 170 45 discriminator 3 view .LVU147
 456 0244 002B     		cmp	r3, #0
 457 0246 00F0FF80 		beq	.L38
 458              		.loc 1 170 45 discriminator 6 view .LVU148
 459 024a 0022     		movs	r2, #0
 460 024c 51E0     		b	.L17
 461              	.L44:
 146:Src/bldc.c    ****       buzzerPrev = 0;
 462              		.loc 1 146 7 is_stmt 1 view .LVU149
 463 024e 0022     		movs	r2, #0
 464 0250 1021     		movs	r1, #16
 465 0252 1F48     		ldr	r0, .L46+104
 466 0254 FFF7FEFF 		bl	HAL_GPIO_WritePin
 467              	.LVL2:
 147:Src/bldc.c    ****   }
ARM GAS  /tmp/ccTkPZjh.s 			page 13


 468              		.loc 1 147 7 view .LVU150
 147:Src/bldc.c    ****   }
 469              		.loc 1 147 18 is_stmt 0 view .LVU151
 470 0258 1A4B     		ldr	r3, .L46+92
 471 025a 0022     		movs	r2, #0
 472 025c 1A70     		strb	r2, [r3]
 473 025e D6E7     		b	.L13
 474              	.L45:
 152:Src/bldc.c    ****   } else {
 475              		.loc 1 152 5 is_stmt 1 view .LVU152
 152:Src/bldc.c    ****   } else {
 476              		.loc 1 152 16 is_stmt 0 view .LVU153
 477 0260 1F4B     		ldr	r3, .L46+120
 478 0262 6E22     		movs	r2, #110
 479 0264 1A80     		strh	r2, [r3]	@ movhi
 480 0266 DAE7     		b	.L16
 481              	.L47:
 482              		.align	2
 483              	.L46:
 484 0268 00000240 		.word	1073872896
 485 026c 00000000 		.word	offsetcount
 486 0270 00000000 		.word	buzzerTimer
 487 0274 D34D6210 		.word	274877907
 488 0278 00000000 		.word	adc_buffer
 489 027c 00000000 		.word	offsetrlA
 490 0280 00000000 		.word	curL_phaA
 491 0284 00000000 		.word	offsetrlB
 492 0288 00000000 		.word	curL_phaB
 493 028c 00000000 		.word	offsetdcl
 494 0290 00000000 		.word	curL_DC
 495 0294 00000000 		.word	offsetrrB
 496 0298 00000000 		.word	curR_phaB
 497 029c 00000000 		.word	offsetrrC
 498 02a0 00000000 		.word	curR_phaC
 499 02a4 00000000 		.word	offsetdcr
 500 02a8 00000000 		.word	curR_DC
 501 02ac 00000000 		.word	enable
 502 02b0 00340140 		.word	1073820672
 503 02b4 002C0140 		.word	1073818624
 504 02b8 00000000 		.word	buzzerFreq
 505 02bc 5917B7D1 		.word	-776530087
 506 02c0 00000000 		.word	buzzerPattern
 507 02c4 00000000 		.word	buzzerPrev
 508 02c8 00000000 		.word	buzzerIdx
 509 02cc 00000000 		.word	buzzerCount
 510 02d0 00080140 		.word	1073809408
 511 02d4 00000000 		.word	batVoltageFixdt
 512 02d8 00000000 		.word	batVoltage
 513 02dc 00000000 		.word	rtP_Left
 514 02e0 00000000 		.word	pwm_margin
 515 02e4 00000000 		.word	OverrunFlag.0
 516 02e8 00000000 		.word	rtY_Left
 517 02ec 00000000 		.word	rtY_Right
 518              	.L36:
 519              		.loc 1 170 45 discriminator 6 view .LVU154
 520 02f0 0022     		movs	r2, #0
 521              	.L17:
ARM GAS  /tmp/ccTkPZjh.s 			page 14


 522              		.loc 1 170 13 discriminator 8 view .LVU155
 523 02f2 D2B2     		uxtb	r2, r2
 524 02f4 6D4B     		ldr	r3, .L48
 525 02f6 1A70     		strb	r2, [r3]
 171:Src/bldc.c    ****  
 172:Src/bldc.c    ****   // ========================= LEFT MOTOR ============================ 
 173:Src/bldc.c    ****     // Get hall sensors values
 174:Src/bldc.c    ****     uint8_t hall_ul = !(LEFT_HALL_U_PORT->IDR & LEFT_HALL_U_PIN);
 526              		.loc 1 174 5 is_stmt 1 view .LVU156
 527              		.loc 1 174 41 is_stmt 0 view .LVU157
 528 02f8 6D4B     		ldr	r3, .L48+4
 529 02fa 9968     		ldr	r1, [r3, #8]
 530              		.loc 1 174 23 view .LVU158
 531 02fc 11F0200F 		tst	r1, #32
 532 0300 0CBF     		ite	eq
 533 0302 0124     		moveq	r4, #1
 534 0304 0024     		movne	r4, #0
 535              	.LVL3:
 175:Src/bldc.c    ****     uint8_t hall_vl = !(LEFT_HALL_V_PORT->IDR & LEFT_HALL_V_PIN);
 536              		.loc 1 175 5 is_stmt 1 view .LVU159
 537              		.loc 1 175 41 is_stmt 0 view .LVU160
 538 0306 9968     		ldr	r1, [r3, #8]
 539              		.loc 1 175 23 view .LVU161
 540 0308 11F0400F 		tst	r1, #64
 541 030c 0CBF     		ite	eq
 542 030e 0120     		moveq	r0, #1
 543 0310 0020     		movne	r0, #0
 544              	.LVL4:
 176:Src/bldc.c    ****     uint8_t hall_wl = !(LEFT_HALL_W_PORT->IDR & LEFT_HALL_W_PIN);
 545              		.loc 1 176 5 is_stmt 1 view .LVU162
 546              		.loc 1 176 41 is_stmt 0 view .LVU163
 547 0312 9B68     		ldr	r3, [r3, #8]
 548              		.loc 1 176 23 view .LVU164
 549 0314 13F0800F 		tst	r3, #128
 550 0318 0CBF     		ite	eq
 551 031a 0121     		moveq	r1, #1
 552 031c 0021     		movne	r1, #0
 553              	.LVL5:
 177:Src/bldc.c    **** 
 178:Src/bldc.c    ****     /* Set motor inputs here */
 179:Src/bldc.c    ****     rtU_Left.b_motEna     = enableFin;
 554              		.loc 1 179 5 is_stmt 1 view .LVU165
 555              		.loc 1 179 27 is_stmt 0 view .LVU166
 556 031e 654B     		ldr	r3, .L48+8
 557 0320 1A70     		strb	r2, [r3]
 180:Src/bldc.c    ****     rtU_Left.z_ctrlModReq = ctrlModReq;  
 558              		.loc 1 180 5 is_stmt 1 view .LVU167
 559              		.loc 1 180 27 is_stmt 0 view .LVU168
 560 0322 654A     		ldr	r2, .L48+12
 561 0324 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 562 0326 5A70     		strb	r2, [r3, #1]
 181:Src/bldc.c    ****     rtU_Left.r_inpTgt     = pwml;
 563              		.loc 1 181 5 is_stmt 1 view .LVU169
 564              		.loc 1 181 27 is_stmt 0 view .LVU170
 565 0328 644A     		ldr	r2, .L48+16
 566 032a 1268     		ldr	r2, [r2]
 567 032c 5A80     		strh	r2, [r3, #2]	@ movhi
ARM GAS  /tmp/ccTkPZjh.s 			page 15


 182:Src/bldc.c    ****     rtU_Left.b_hallA      = hall_ul;
 568              		.loc 1 182 5 is_stmt 1 view .LVU171
 569              		.loc 1 182 27 is_stmt 0 view .LVU172
 570 032e 1C71     		strb	r4, [r3, #4]
 183:Src/bldc.c    ****     rtU_Left.b_hallB      = hall_vl;
 571              		.loc 1 183 5 is_stmt 1 view .LVU173
 572              		.loc 1 183 27 is_stmt 0 view .LVU174
 573 0330 5871     		strb	r0, [r3, #5]
 184:Src/bldc.c    ****     rtU_Left.b_hallC      = hall_wl;
 574              		.loc 1 184 5 is_stmt 1 view .LVU175
 575              		.loc 1 184 27 is_stmt 0 view .LVU176
 576 0332 9971     		strb	r1, [r3, #6]
 185:Src/bldc.c    ****     rtU_Left.i_phaAB      = curL_phaA;
 577              		.loc 1 185 5 is_stmt 1 view .LVU177
 578              		.loc 1 185 27 is_stmt 0 view .LVU178
 579 0334 624A     		ldr	r2, .L48+20
 580 0336 1288     		ldrh	r2, [r2]
 581 0338 1A81     		strh	r2, [r3, #8]	@ movhi
 186:Src/bldc.c    ****     rtU_Left.i_phaBC      = curL_phaB;
 582              		.loc 1 186 5 is_stmt 1 view .LVU179
 583              		.loc 1 186 27 is_stmt 0 view .LVU180
 584 033a 624A     		ldr	r2, .L48+24
 585 033c 1288     		ldrh	r2, [r2]
 586 033e 5A81     		strh	r2, [r3, #10]	@ movhi
 187:Src/bldc.c    ****     rtU_Left.i_DCLink     = curL_DC;
 587              		.loc 1 187 5 is_stmt 1 view .LVU181
 588              		.loc 1 187 27 is_stmt 0 view .LVU182
 589 0340 614A     		ldr	r2, .L48+28
 590 0342 1288     		ldrh	r2, [r2]
 591 0344 9A81     		strh	r2, [r3, #12]	@ movhi
 188:Src/bldc.c    ****     // rtU_Left.a_mechAngle   = ...; // Angle input in DEGREES [0,360] in fixdt(1,16,4) data type. 
 189:Src/bldc.c    ****     
 190:Src/bldc.c    ****     /* Step the controller */
 191:Src/bldc.c    ****     #ifdef MOTOR_LEFT_ENA    
 192:Src/bldc.c    ****     BLDC_controller_step(rtM_Left);
 592              		.loc 1 192 5 is_stmt 1 view .LVU183
 593 0346 614B     		ldr	r3, .L48+32
 594 0348 1868     		ldr	r0, [r3]
 595              	.LVL6:
 596              		.loc 1 192 5 is_stmt 0 view .LVU184
 597 034a FFF7FEFF 		bl	BLDC_controller_step
 598              	.LVL7:
 193:Src/bldc.c    ****     #endif
 194:Src/bldc.c    **** 
 195:Src/bldc.c    ****     /* Get motor outputs here */
 196:Src/bldc.c    ****     ul            = rtY_Left.DC_phaA;
 599              		.loc 1 196 5 is_stmt 1 view .LVU185
 600              		.loc 1 196 29 is_stmt 0 view .LVU186
 601 034e 604B     		ldr	r3, .L48+36
 602 0350 B3F90010 		ldrsh	r1, [r3]
 603              	.LVL8:
 197:Src/bldc.c    ****     vl            = rtY_Left.DC_phaB;
 604              		.loc 1 197 5 is_stmt 1 view .LVU187
 605              		.loc 1 197 29 is_stmt 0 view .LVU188
 606 0354 B3F90220 		ldrsh	r2, [r3, #2]
 607              	.LVL9:
 198:Src/bldc.c    ****     wl            = rtY_Left.DC_phaC;
ARM GAS  /tmp/ccTkPZjh.s 			page 16


 608              		.loc 1 198 5 is_stmt 1 view .LVU189
 609              		.loc 1 198 29 is_stmt 0 view .LVU190
 610 0358 B3F904C0 		ldrsh	ip, [r3, #4]
 611              	.LVL10:
 199:Src/bldc.c    ****   // errCodeLeft  = rtY_Left.z_errCode;
 200:Src/bldc.c    ****   // motSpeedLeft = rtY_Left.n_mot;
 201:Src/bldc.c    ****   // motAngleLeft = rtY_Left.a_elecAngle;
 202:Src/bldc.c    **** 
 203:Src/bldc.c    ****     /* Apply commands */
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_U    = (uint16_t)CLAMP(ul + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 612              		.loc 1 204 5 is_stmt 1 view .LVU191
 613              		.loc 1 204 41 is_stmt 0 view .LVU192
 614 035c 01F2E734 		addw	r4, r1, #999
 615              	.LVL11:
 616              		.loc 1 204 41 view .LVU193
 617 0360 5C4B     		ldr	r3, .L48+40
 618 0362 B3F90030 		ldrsh	r3, [r3]
 619 0366 C3F5FA60 		rsb	r0, r3, #2000
 620              		.loc 1 204 31 view .LVU194
 621 036a 8442     		cmp	r4, r0
 622 036c 6EDB     		blt	.L18
 623              		.loc 1 204 41 discriminator 1 view .LVU195
 624 036e 81B2     		uxth	r1, r0
 625              	.LVL12:
 626              	.L19:
 627              		.loc 1 204 29 discriminator 8 view .LVU196
 628 0370 594C     		ldr	r4, .L48+44
 629 0372 6163     		str	r1, [r4, #52]
 630              	.LVL13:
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 631              		.loc 1 205 5 is_stmt 1 view .LVU197
 632              		.loc 1 205 41 is_stmt 0 view .LVU198
 633 0374 02F2E731 		addw	r1, r2, #999
 634              		.loc 1 205 31 view .LVU199
 635 0378 8842     		cmp	r0, r1
 636 037a 6FDC     		bgt	.L21
 637              		.loc 1 205 41 discriminator 1 view .LVU200
 638 037c C3F5FA62 		rsb	r2, r3, #2000
 639              	.LVL14:
 640              		.loc 1 205 41 discriminator 1 view .LVU201
 641 0380 92B2     		uxth	r2, r2
 642              	.LVL15:
 643              	.L22:
 644              		.loc 1 205 29 discriminator 8 view .LVU202
 645 0382 5549     		ldr	r1, .L48+44
 646 0384 8A63     		str	r2, [r1, #56]
 206:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 647              		.loc 1 206 5 is_stmt 1 view .LVU203
 648              		.loc 1 206 41 is_stmt 0 view .LVU204
 649 0386 0CF2E732 		addw	r2, ip, #999
 650              		.loc 1 206 31 view .LVU205
 651 038a 9042     		cmp	r0, r2
 652 038c 6EDC     		bgt	.L24
 653              		.loc 1 206 41 discriminator 1 view .LVU206
 654 038e C3F5FA63 		rsb	r3, r3, #2000
 655 0392 9BB2     		uxth	r3, r3
 656              	.L25:
ARM GAS  /tmp/ccTkPZjh.s 			page 17


 657              		.loc 1 206 29 discriminator 8 view .LVU207
 658 0394 504A     		ldr	r2, .L48+44
 659 0396 D363     		str	r3, [r2, #60]
 207:Src/bldc.c    ****   // =================================================================
 208:Src/bldc.c    ****   
 209:Src/bldc.c    **** 
 210:Src/bldc.c    ****   // ========================= RIGHT MOTOR ===========================  
 211:Src/bldc.c    ****     // Get hall sensors values
 212:Src/bldc.c    ****     uint8_t hall_ur = !(RIGHT_HALL_U_PORT->IDR & RIGHT_HALL_U_PIN);
 660              		.loc 1 212 5 is_stmt 1 view .LVU208
 661              		.loc 1 212 42 is_stmt 0 view .LVU209
 662 0398 504B     		ldr	r3, .L48+48
 663 039a 9A68     		ldr	r2, [r3, #8]
 664              		.loc 1 212 23 view .LVU210
 665 039c 12F4806F 		tst	r2, #1024
 666 03a0 0CBF     		ite	eq
 667 03a2 0120     		moveq	r0, #1
 668 03a4 0020     		movne	r0, #0
 669              	.LVL16:
 213:Src/bldc.c    ****     uint8_t hall_vr = !(RIGHT_HALL_V_PORT->IDR & RIGHT_HALL_V_PIN);
 670              		.loc 1 213 5 is_stmt 1 view .LVU211
 671              		.loc 1 213 42 is_stmt 0 view .LVU212
 672 03a6 9A68     		ldr	r2, [r3, #8]
 673              		.loc 1 213 23 view .LVU213
 674 03a8 12F4006F 		tst	r2, #2048
 675 03ac 0CBF     		ite	eq
 676 03ae 0121     		moveq	r1, #1
 677 03b0 0021     		movne	r1, #0
 678              	.LVL17:
 214:Src/bldc.c    ****     uint8_t hall_wr = !(RIGHT_HALL_W_PORT->IDR & RIGHT_HALL_W_PIN);
 679              		.loc 1 214 5 is_stmt 1 view .LVU214
 680              		.loc 1 214 42 is_stmt 0 view .LVU215
 681 03b2 9B68     		ldr	r3, [r3, #8]
 682              		.loc 1 214 23 view .LVU216
 683 03b4 13F4805F 		tst	r3, #4096
 684 03b8 0CBF     		ite	eq
 685 03ba 0122     		moveq	r2, #1
 686 03bc 0022     		movne	r2, #0
 687              	.LVL18:
 215:Src/bldc.c    **** 
 216:Src/bldc.c    ****     /* Set motor inputs here */
 217:Src/bldc.c    ****     rtU_Right.b_motEna      = enableFin;
 688              		.loc 1 217 5 is_stmt 1 view .LVU217
 689              		.loc 1 217 29 is_stmt 0 view .LVU218
 690 03be 484B     		ldr	r3, .L48+52
 691 03c0 3A4C     		ldr	r4, .L48
 692 03c2 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 693 03c4 1C70     		strb	r4, [r3]
 218:Src/bldc.c    ****     rtU_Right.z_ctrlModReq  = ctrlModReq;
 694              		.loc 1 218 5 is_stmt 1 view .LVU219
 695              		.loc 1 218 29 is_stmt 0 view .LVU220
 696 03c6 3C4C     		ldr	r4, .L48+12
 697 03c8 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 698 03ca 5C70     		strb	r4, [r3, #1]
 219:Src/bldc.c    ****     rtU_Right.r_inpTgt      = pwmr;
 699              		.loc 1 219 5 is_stmt 1 view .LVU221
 700              		.loc 1 219 29 is_stmt 0 view .LVU222
ARM GAS  /tmp/ccTkPZjh.s 			page 18


 701 03cc 454C     		ldr	r4, .L48+56
 702 03ce 2468     		ldr	r4, [r4]
 703 03d0 5C80     		strh	r4, [r3, #2]	@ movhi
 220:Src/bldc.c    ****     rtU_Right.b_hallA       = hall_ur;
 704              		.loc 1 220 5 is_stmt 1 view .LVU223
 705              		.loc 1 220 29 is_stmt 0 view .LVU224
 706 03d2 1871     		strb	r0, [r3, #4]
 221:Src/bldc.c    ****     rtU_Right.b_hallB       = hall_vr;
 707              		.loc 1 221 5 is_stmt 1 view .LVU225
 708              		.loc 1 221 29 is_stmt 0 view .LVU226
 709 03d4 5971     		strb	r1, [r3, #5]
 222:Src/bldc.c    ****     rtU_Right.b_hallC       = hall_wr;
 710              		.loc 1 222 5 is_stmt 1 view .LVU227
 711              		.loc 1 222 29 is_stmt 0 view .LVU228
 712 03d6 9A71     		strb	r2, [r3, #6]
 223:Src/bldc.c    ****     rtU_Right.i_phaAB       = curR_phaB;
 713              		.loc 1 223 5 is_stmt 1 view .LVU229
 714              		.loc 1 223 29 is_stmt 0 view .LVU230
 715 03d8 434A     		ldr	r2, .L48+60
 716              	.LVL19:
 717              		.loc 1 223 29 view .LVU231
 718 03da 1288     		ldrh	r2, [r2]
 719 03dc 1A81     		strh	r2, [r3, #8]	@ movhi
 224:Src/bldc.c    ****     rtU_Right.i_phaBC       = curR_phaC;
 720              		.loc 1 224 5 is_stmt 1 view .LVU232
 721              		.loc 1 224 29 is_stmt 0 view .LVU233
 722 03de 434A     		ldr	r2, .L48+64
 723 03e0 1288     		ldrh	r2, [r2]
 724 03e2 5A81     		strh	r2, [r3, #10]	@ movhi
 225:Src/bldc.c    ****     rtU_Right.i_DCLink      = curR_DC;
 725              		.loc 1 225 5 is_stmt 1 view .LVU234
 726              		.loc 1 225 29 is_stmt 0 view .LVU235
 727 03e4 424A     		ldr	r2, .L48+68
 728 03e6 1288     		ldrh	r2, [r2]
 729 03e8 9A81     		strh	r2, [r3, #12]	@ movhi
 226:Src/bldc.c    ****     // rtU_Right.a_mechAngle   = ...; // Angle input in DEGREES [0,360] in fixdt(1,16,4) data type.
 227:Src/bldc.c    ****     
 228:Src/bldc.c    ****     /* Step the controller */
 229:Src/bldc.c    ****     #ifdef MOTOR_RIGHT_ENA
 230:Src/bldc.c    ****     BLDC_controller_step(rtM_Right);
 730              		.loc 1 230 5 is_stmt 1 view .LVU236
 731 03ea 424B     		ldr	r3, .L48+72
 732              	.LVL20:
 733              		.loc 1 230 5 is_stmt 0 view .LVU237
 734 03ec 1868     		ldr	r0, [r3]
 735              	.LVL21:
 736              		.loc 1 230 5 view .LVU238
 737 03ee FFF7FEFF 		bl	BLDC_controller_step
 738              	.LVL22:
 231:Src/bldc.c    ****     #endif
 232:Src/bldc.c    **** 
 233:Src/bldc.c    ****     /* Get motor outputs here */
 234:Src/bldc.c    ****     ur            = rtY_Right.DC_phaA;
 739              		.loc 1 234 5 is_stmt 1 view .LVU239
 740              		.loc 1 234 30 is_stmt 0 view .LVU240
 741 03f2 414B     		ldr	r3, .L48+76
 742 03f4 B3F90010 		ldrsh	r1, [r3]
ARM GAS  /tmp/ccTkPZjh.s 			page 19


 743              	.LVL23:
 235:Src/bldc.c    ****     vr            = rtY_Right.DC_phaB;
 744              		.loc 1 235 5 is_stmt 1 view .LVU241
 745              		.loc 1 235 30 is_stmt 0 view .LVU242
 746 03f8 B3F90220 		ldrsh	r2, [r3, #2]
 747              	.LVL24:
 236:Src/bldc.c    ****     wr            = rtY_Right.DC_phaC;
 748              		.loc 1 236 5 is_stmt 1 view .LVU243
 749              		.loc 1 236 30 is_stmt 0 view .LVU244
 750 03fc B3F904C0 		ldrsh	ip, [r3, #4]
 751              	.LVL25:
 237:Src/bldc.c    ****  // errCodeRight  = rtY_Right.z_errCode;
 238:Src/bldc.c    ****  // motSpeedRight = rtY_Right.n_mot;
 239:Src/bldc.c    ****  // motAngleRight = rtY_Right.a_elecAngle;
 240:Src/bldc.c    **** 
 241:Src/bldc.c    ****     /* Apply commands */
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_U  = (uint16_t)CLAMP(ur + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 752              		.loc 1 242 5 is_stmt 1 view .LVU245
 753              		.loc 1 242 41 is_stmt 0 view .LVU246
 754 0400 01F2E734 		addw	r4, r1, #999
 755 0404 334B     		ldr	r3, .L48+40
 756 0406 B3F90030 		ldrsh	r3, [r3]
 757 040a C3F5FA60 		rsb	r0, r3, #2000
 758              		.loc 1 242 31 view .LVU247
 759 040e 8442     		cmp	r4, r0
 760 0410 34DB     		blt	.L27
 761              		.loc 1 242 41 discriminator 1 view .LVU248
 762 0412 81B2     		uxth	r1, r0
 763              	.LVL26:
 764              	.L28:
 765              		.loc 1 242 29 discriminator 8 view .LVU249
 766 0414 394C     		ldr	r4, .L48+80
 767 0416 6163     		str	r1, [r4, #52]
 768              	.LVL27:
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 769              		.loc 1 243 5 is_stmt 1 view .LVU250
 770              		.loc 1 243 41 is_stmt 0 view .LVU251
 771 0418 02F2E731 		addw	r1, r2, #999
 772              		.loc 1 243 31 view .LVU252
 773 041c 8842     		cmp	r0, r1
 774 041e 35DC     		bgt	.L30
 775              		.loc 1 243 41 discriminator 1 view .LVU253
 776 0420 C3F5FA62 		rsb	r2, r3, #2000
 777              	.LVL28:
 778              		.loc 1 243 41 discriminator 1 view .LVU254
 779 0424 92B2     		uxth	r2, r2
 780              	.LVL29:
 781              	.L31:
 782              		.loc 1 243 29 discriminator 8 view .LVU255
 783 0426 3549     		ldr	r1, .L48+80
 784 0428 8A63     		str	r2, [r1, #56]
 244:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 785              		.loc 1 244 5 is_stmt 1 view .LVU256
 786              		.loc 1 244 41 is_stmt 0 view .LVU257
 787 042a 0CF2E732 		addw	r2, ip, #999
 788              		.loc 1 244 31 view .LVU258
 789 042e 9042     		cmp	r0, r2
ARM GAS  /tmp/ccTkPZjh.s 			page 20


 790 0430 34DC     		bgt	.L33
 791              		.loc 1 244 41 discriminator 1 view .LVU259
 792 0432 C3F5FA63 		rsb	r3, r3, #2000
 793 0436 9BB2     		uxth	r3, r3
 794              	.L34:
 795              		.loc 1 244 29 discriminator 8 view .LVU260
 796 0438 304A     		ldr	r2, .L48+80
 797 043a D363     		str	r3, [r2, #60]
 245:Src/bldc.c    ****   // =================================================================
 246:Src/bldc.c    **** 
 247:Src/bldc.c    ****   /* Indicate task complete */
 248:Src/bldc.c    ****   OverrunFlag = false;
 798              		.loc 1 248 3 is_stmt 1 view .LVU261
 799              		.loc 1 248 15 is_stmt 0 view .LVU262
 800 043c 304B     		ldr	r3, .L48+84
 801 043e 0022     		movs	r2, #0
 802 0440 1A70     		strb	r2, [r3]
 803              	.LVL30:
 804              	.L1:
 249:Src/bldc.c    ****  
 250:Src/bldc.c    ****  // ###############################################################################
 251:Src/bldc.c    **** 
 252:Src/bldc.c    **** }
 805              		.loc 1 252 1 view .LVU263
 806 0442 10BD     		pop	{r4, pc}
 807              	.L37:
 170:Src/bldc.c    ****  
 808              		.loc 1 170 45 discriminator 6 view .LVU264
 809 0444 0022     		movs	r2, #0
 810 0446 54E7     		b	.L17
 811              	.L38:
 170:Src/bldc.c    ****  
 812              		.loc 1 170 45 discriminator 5 view .LVU265
 813 0448 0122     		movs	r2, #1
 814 044a 52E7     		b	.L17
 815              	.LVL31:
 816              	.L18:
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 817              		.loc 1 204 41 discriminator 2 view .LVU266
 818 044c 01F57A74 		add	r4, r1, #1000
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 819              		.loc 1 204 31 discriminator 2 view .LVU267
 820 0450 A342     		cmp	r3, r4
 821 0452 01DC     		bgt	.L20
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 822              		.loc 1 204 41 discriminator 4 view .LVU268
 823 0454 A1B2     		uxth	r1, r4
 824              	.LVL32:
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 825              		.loc 1 204 41 discriminator 4 view .LVU269
 826 0456 8BE7     		b	.L19
 827              	.LVL33:
 828              	.L20:
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 829              		.loc 1 204 31 discriminator 5 view .LVU270
 830 0458 99B2     		uxth	r1, r3
 831              	.LVL34:
ARM GAS  /tmp/ccTkPZjh.s 			page 21


 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 832              		.loc 1 204 31 discriminator 5 view .LVU271
 833 045a 89E7     		b	.L19
 834              	.LVL35:
 835              	.L21:
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 836              		.loc 1 205 41 discriminator 2 view .LVU272
 837 045c 02F57A71 		add	r1, r2, #1000
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 838              		.loc 1 205 31 discriminator 2 view .LVU273
 839 0460 8B42     		cmp	r3, r1
 840 0462 01DC     		bgt	.L23
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 841              		.loc 1 205 41 discriminator 4 view .LVU274
 842 0464 8AB2     		uxth	r2, r1
 843              	.LVL36:
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 844              		.loc 1 205 41 discriminator 4 view .LVU275
 845 0466 8CE7     		b	.L22
 846              	.LVL37:
 847              	.L23:
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 848              		.loc 1 205 31 discriminator 5 view .LVU276
 849 0468 9AB2     		uxth	r2, r3
 850              	.LVL38:
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 851              		.loc 1 205 31 discriminator 5 view .LVU277
 852 046a 8AE7     		b	.L22
 853              	.LVL39:
 854              	.L24:
 206:Src/bldc.c    ****   // =================================================================
 855              		.loc 1 206 41 discriminator 2 view .LVU278
 856 046c 0CF57A72 		add	r2, ip, #1000
 206:Src/bldc.c    ****   // =================================================================
 857              		.loc 1 206 31 discriminator 2 view .LVU279
 858 0470 9342     		cmp	r3, r2
 859 0472 01DC     		bgt	.L26
 206:Src/bldc.c    ****   // =================================================================
 860              		.loc 1 206 41 discriminator 4 view .LVU280
 861 0474 93B2     		uxth	r3, r2
 862 0476 8DE7     		b	.L25
 863              	.L26:
 206:Src/bldc.c    ****   // =================================================================
 864              		.loc 1 206 31 discriminator 5 view .LVU281
 865 0478 9BB2     		uxth	r3, r3
 866 047a 8BE7     		b	.L25
 867              	.LVL40:
 868              	.L27:
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 869              		.loc 1 242 41 discriminator 2 view .LVU282
 870 047c 01F57A74 		add	r4, r1, #1000
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 871              		.loc 1 242 31 discriminator 2 view .LVU283
 872 0480 A342     		cmp	r3, r4
 873 0482 01DC     		bgt	.L29
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 874              		.loc 1 242 41 discriminator 4 view .LVU284
ARM GAS  /tmp/ccTkPZjh.s 			page 22


 875 0484 A1B2     		uxth	r1, r4
 876              	.LVL41:
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 877              		.loc 1 242 41 discriminator 4 view .LVU285
 878 0486 C5E7     		b	.L28
 879              	.LVL42:
 880              	.L29:
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 881              		.loc 1 242 31 discriminator 5 view .LVU286
 882 0488 99B2     		uxth	r1, r3
 883              	.LVL43:
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 884              		.loc 1 242 31 discriminator 5 view .LVU287
 885 048a C3E7     		b	.L28
 886              	.LVL44:
 887              	.L30:
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 888              		.loc 1 243 41 discriminator 2 view .LVU288
 889 048c 02F57A71 		add	r1, r2, #1000
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 890              		.loc 1 243 31 discriminator 2 view .LVU289
 891 0490 8B42     		cmp	r3, r1
 892 0492 01DC     		bgt	.L32
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 893              		.loc 1 243 41 discriminator 4 view .LVU290
 894 0494 8AB2     		uxth	r2, r1
 895              	.LVL45:
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 896              		.loc 1 243 41 discriminator 4 view .LVU291
 897 0496 C6E7     		b	.L31
 898              	.LVL46:
 899              	.L32:
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 900              		.loc 1 243 31 discriminator 5 view .LVU292
 901 0498 9AB2     		uxth	r2, r3
 902              	.LVL47:
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 903              		.loc 1 243 31 discriminator 5 view .LVU293
 904 049a C4E7     		b	.L31
 905              	.LVL48:
 906              	.L33:
 244:Src/bldc.c    ****   // =================================================================
 907              		.loc 1 244 41 discriminator 2 view .LVU294
 908 049c 0CF57A72 		add	r2, ip, #1000
 244:Src/bldc.c    ****   // =================================================================
 909              		.loc 1 244 31 discriminator 2 view .LVU295
 910 04a0 9342     		cmp	r3, r2
 911 04a2 01DC     		bgt	.L35
 244:Src/bldc.c    ****   // =================================================================
 912              		.loc 1 244 41 discriminator 4 view .LVU296
 913 04a4 93B2     		uxth	r3, r2
 914 04a6 C7E7     		b	.L34
 915              	.L35:
 244:Src/bldc.c    ****   // =================================================================
 916              		.loc 1 244 31 discriminator 5 view .LVU297
 917 04a8 9BB2     		uxth	r3, r3
 918 04aa C5E7     		b	.L34
ARM GAS  /tmp/ccTkPZjh.s 			page 23


 919              	.L49:
 920              		.align	2
 921              	.L48:
 922 04ac 00000000 		.word	enableFin
 923 04b0 000C0140 		.word	1073810432
 924 04b4 00000000 		.word	rtU_Left
 925 04b8 00000000 		.word	ctrlModReq
 926 04bc 00000000 		.word	pwml
 927 04c0 00000000 		.word	curL_phaA
 928 04c4 00000000 		.word	curL_phaB
 929 04c8 00000000 		.word	curL_DC
 930 04cc 00000000 		.word	rtM_Left
 931 04d0 00000000 		.word	rtY_Left
 932 04d4 00000000 		.word	pwm_margin
 933 04d8 00340140 		.word	1073820672
 934 04dc 00100140 		.word	1073811456
 935 04e0 00000000 		.word	rtU_Right
 936 04e4 00000000 		.word	pwmr
 937 04e8 00000000 		.word	curR_phaB
 938 04ec 00000000 		.word	curR_phaC
 939 04f0 00000000 		.word	curR_DC
 940 04f4 00000000 		.word	rtM_Right
 941 04f8 00000000 		.word	rtY_Right
 942 04fc 002C0140 		.word	1073818624
 943 0500 00000000 		.word	OverrunFlag.0
 944              		.cfi_endproc
 945              	.LFE66:
 947              		.section	.bss.OverrunFlag.0,"aw",%nobits
 950              	OverrunFlag.0:
 951 0000 00       		.space	1
 952              		.section	.data.batVoltageFixdt,"aw"
 953              		.align	2
 956              	batVoltageFixdt:
 957 0000 0000DF05 		.word	98500608
 958              		.global	batVoltage
 959              		.section	.data.batVoltage,"aw"
 960              		.align	1
 963              	batVoltage:
 964 0000 DF05     		.short	1503
 965              		.section	.data.offsetdcr,"aw"
 966              		.align	1
 969              	offsetdcr:
 970 0000 D007     		.short	2000
 971              		.section	.data.offsetdcl,"aw"
 972              		.align	1
 975              	offsetdcl:
 976 0000 D007     		.short	2000
 977              		.section	.data.offsetrrC,"aw"
 978              		.align	1
 981              	offsetrrC:
 982 0000 D007     		.short	2000
 983              		.section	.data.offsetrrB,"aw"
 984              		.align	1
 987              	offsetrrB:
 988 0000 D007     		.short	2000
 989              		.section	.data.offsetrlB,"aw"
 990              		.align	1
ARM GAS  /tmp/ccTkPZjh.s 			page 24


 993              	offsetrlB:
 994 0000 D007     		.short	2000
 995              		.section	.data.offsetrlA,"aw"
 996              		.align	1
 999              	offsetrlA:
 1000 0000 D007     		.short	2000
 1001              		.section	.bss.offsetcount,"aw",%nobits
 1002              		.align	1
 1005              	offsetcount:
 1006 0000 0000     		.space	2
 1007              		.section	.bss.enableFin,"aw",%nobits
 1010              	enableFin:
 1011 0000 00       		.space	1
 1012              		.global	enable
 1013              		.section	.bss.enable,"aw",%nobits
 1016              	enable:
 1017 0000 00       		.space	1
 1018              		.section	.bss.buzzerIdx,"aw",%nobits
 1021              	buzzerIdx:
 1022 0000 00       		.space	1
 1023              		.section	.bss.buzzerPrev,"aw",%nobits
 1026              	buzzerPrev:
 1027 0000 00       		.space	1
 1028              		.global	buzzerTimer
 1029              		.section	.bss.buzzerTimer,"aw",%nobits
 1030              		.align	2
 1033              	buzzerTimer:
 1034 0000 00000000 		.space	4
 1035              		.global	buzzerCount
 1036              		.section	.bss.buzzerCount,"aw",%nobits
 1039              	buzzerCount:
 1040 0000 00       		.space	1
 1041              		.global	buzzerPattern
 1042              		.section	.bss.buzzerPattern,"aw",%nobits
 1045              	buzzerPattern:
 1046 0000 00       		.space	1
 1047              		.global	buzzerFreq
 1048              		.section	.bss.buzzerFreq,"aw",%nobits
 1051              	buzzerFreq:
 1052 0000 00       		.space	1
 1053              		.global	pwmr
 1054              		.section	.bss.pwmr,"aw",%nobits
 1055              		.align	2
 1058              	pwmr:
 1059 0000 00000000 		.space	4
 1060              		.global	pwml
 1061              		.section	.bss.pwml,"aw",%nobits
 1062              		.align	2
 1065              	pwml:
 1066 0000 00000000 		.space	4
 1067              		.global	curR_DC
 1068              		.section	.bss.curR_DC,"aw",%nobits
 1069              		.align	1
 1072              	curR_DC:
 1073 0000 0000     		.space	2
 1074              		.global	curR_phaC
 1075              		.section	.bss.curR_phaC,"aw",%nobits
ARM GAS  /tmp/ccTkPZjh.s 			page 25


 1076              		.align	1
 1079              	curR_phaC:
 1080 0000 0000     		.space	2
 1081              		.global	curR_phaB
 1082              		.section	.bss.curR_phaB,"aw",%nobits
 1083              		.align	1
 1086              	curR_phaB:
 1087 0000 0000     		.space	2
 1088              		.global	curL_DC
 1089              		.section	.bss.curL_DC,"aw",%nobits
 1090              		.align	1
 1093              	curL_DC:
 1094 0000 0000     		.space	2
 1095              		.global	curL_phaB
 1096              		.section	.bss.curL_phaB,"aw",%nobits
 1097              		.align	1
 1100              	curL_phaB:
 1101 0000 0000     		.space	2
 1102              		.global	curL_phaA
 1103              		.section	.bss.curL_phaA,"aw",%nobits
 1104              		.align	1
 1107              	curL_phaA:
 1108 0000 0000     		.space	2
 1109              		.section	.bss.pwm_margin,"aw",%nobits
 1110              		.align	1
 1113              	pwm_margin:
 1114 0000 0000     		.space	2
 1115              		.text
 1116              	.Letext0:
 1117              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 1118              		.file 3 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1119              		.file 4 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1120              		.file 5 "Inc/defines.h"
 1121              		.file 6 "Inc/rtwtypes.h"
 1122              		.file 7 "Inc/BLDC_controller.h"
 1123              		.file 8 "Inc/util.h"
ARM GAS  /tmp/ccTkPZjh.s 			page 26


DEFINED SYMBOLS
                            *ABS*:00000000 bldc.c
     /tmp/ccTkPZjh.s:19     .text.DMA1_Channel1_IRQHandler:00000000 $t
     /tmp/ccTkPZjh.s:25     .text.DMA1_Channel1_IRQHandler:00000000 DMA1_Channel1_IRQHandler
     /tmp/ccTkPZjh.s:484    .text.DMA1_Channel1_IRQHandler:00000268 $d
     /tmp/ccTkPZjh.s:1005   .bss.offsetcount:00000000 offsetcount
     /tmp/ccTkPZjh.s:1033   .bss.buzzerTimer:00000000 buzzerTimer
     /tmp/ccTkPZjh.s:999    .data.offsetrlA:00000000 offsetrlA
     /tmp/ccTkPZjh.s:1107   .bss.curL_phaA:00000000 curL_phaA
     /tmp/ccTkPZjh.s:993    .data.offsetrlB:00000000 offsetrlB
     /tmp/ccTkPZjh.s:1100   .bss.curL_phaB:00000000 curL_phaB
     /tmp/ccTkPZjh.s:975    .data.offsetdcl:00000000 offsetdcl
     /tmp/ccTkPZjh.s:1093   .bss.curL_DC:00000000 curL_DC
     /tmp/ccTkPZjh.s:987    .data.offsetrrB:00000000 offsetrrB
     /tmp/ccTkPZjh.s:1086   .bss.curR_phaB:00000000 curR_phaB
     /tmp/ccTkPZjh.s:981    .data.offsetrrC:00000000 offsetrrC
     /tmp/ccTkPZjh.s:1079   .bss.curR_phaC:00000000 curR_phaC
     /tmp/ccTkPZjh.s:969    .data.offsetdcr:00000000 offsetdcr
     /tmp/ccTkPZjh.s:1072   .bss.curR_DC:00000000 curR_DC
     /tmp/ccTkPZjh.s:1016   .bss.enable:00000000 enable
     /tmp/ccTkPZjh.s:1051   .bss.buzzerFreq:00000000 buzzerFreq
     /tmp/ccTkPZjh.s:1045   .bss.buzzerPattern:00000000 buzzerPattern
     /tmp/ccTkPZjh.s:1026   .bss.buzzerPrev:00000000 buzzerPrev
     /tmp/ccTkPZjh.s:1021   .bss.buzzerIdx:00000000 buzzerIdx
     /tmp/ccTkPZjh.s:1039   .bss.buzzerCount:00000000 buzzerCount
     /tmp/ccTkPZjh.s:956    .data.batVoltageFixdt:00000000 batVoltageFixdt
     /tmp/ccTkPZjh.s:963    .data.batVoltage:00000000 batVoltage
     /tmp/ccTkPZjh.s:1113   .bss.pwm_margin:00000000 pwm_margin
     /tmp/ccTkPZjh.s:950    .bss.OverrunFlag.0:00000000 OverrunFlag.0
     /tmp/ccTkPZjh.s:520    .text.DMA1_Channel1_IRQHandler:000002f0 $t
     /tmp/ccTkPZjh.s:922    .text.DMA1_Channel1_IRQHandler:000004ac $d
     /tmp/ccTkPZjh.s:1010   .bss.enableFin:00000000 enableFin
     /tmp/ccTkPZjh.s:1065   .bss.pwml:00000000 pwml
     /tmp/ccTkPZjh.s:1058   .bss.pwmr:00000000 pwmr
     /tmp/ccTkPZjh.s:951    .bss.OverrunFlag.0:00000000 $d
     /tmp/ccTkPZjh.s:953    .data.batVoltageFixdt:00000000 $d
     /tmp/ccTkPZjh.s:960    .data.batVoltage:00000000 $d
     /tmp/ccTkPZjh.s:966    .data.offsetdcr:00000000 $d
     /tmp/ccTkPZjh.s:972    .data.offsetdcl:00000000 $d
     /tmp/ccTkPZjh.s:978    .data.offsetrrC:00000000 $d
     /tmp/ccTkPZjh.s:984    .data.offsetrrB:00000000 $d
     /tmp/ccTkPZjh.s:990    .data.offsetrlB:00000000 $d
     /tmp/ccTkPZjh.s:996    .data.offsetrlA:00000000 $d
     /tmp/ccTkPZjh.s:1002   .bss.offsetcount:00000000 $d
     /tmp/ccTkPZjh.s:1011   .bss.enableFin:00000000 $d
     /tmp/ccTkPZjh.s:1017   .bss.enable:00000000 $d
     /tmp/ccTkPZjh.s:1022   .bss.buzzerIdx:00000000 $d
     /tmp/ccTkPZjh.s:1027   .bss.buzzerPrev:00000000 $d
     /tmp/ccTkPZjh.s:1030   .bss.buzzerTimer:00000000 $d
     /tmp/ccTkPZjh.s:1040   .bss.buzzerCount:00000000 $d
     /tmp/ccTkPZjh.s:1046   .bss.buzzerPattern:00000000 $d
     /tmp/ccTkPZjh.s:1052   .bss.buzzerFreq:00000000 $d
     /tmp/ccTkPZjh.s:1055   .bss.pwmr:00000000 $d
     /tmp/ccTkPZjh.s:1062   .bss.pwml:00000000 $d
     /tmp/ccTkPZjh.s:1069   .bss.curR_DC:00000000 $d
     /tmp/ccTkPZjh.s:1076   .bss.curR_phaC:00000000 $d
     /tmp/ccTkPZjh.s:1083   .bss.curR_phaB:00000000 $d
ARM GAS  /tmp/ccTkPZjh.s 			page 27


     /tmp/ccTkPZjh.s:1090   .bss.curL_DC:00000000 $d
     /tmp/ccTkPZjh.s:1097   .bss.curL_phaB:00000000 $d
     /tmp/ccTkPZjh.s:1104   .bss.curL_phaA:00000000 $d
     /tmp/ccTkPZjh.s:1110   .bss.pwm_margin:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
filtLowPass32
HAL_GPIO_WritePin
adc_buffer
rtP_Left
rtY_Left
rtY_Right
BLDC_controller_step
rtU_Left
ctrlModReq
rtM_Left
rtU_Right
rtM_Right
