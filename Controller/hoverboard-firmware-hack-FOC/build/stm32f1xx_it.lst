ARM GAS  /tmp/cc3fsheh.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f1xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/stm32f1xx_it.c"
  18              		.section	.text.NMI_Handler,"ax",%progbits
  19              		.align	1
  20              		.global	NMI_Handler
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	NMI_Handler:
  26              	.LFB66:
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
  32:Src/stm32f1xx_it.c ****   */
ARM GAS  /tmp/cc3fsheh.s 			page 2


  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** #include "defines.h"
  38:Src/stm32f1xx_it.c **** #include "config.h"
  39:Src/stm32f1xx_it.c **** #include "util.h"
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_i2c2_rx;
  42:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_i2c2_tx;
  43:Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
  44:Src/stm32f1xx_it.c **** 
  45:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  46:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  47:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_rx;
  48:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_tx;
  49:Src/stm32f1xx_it.c **** 
  50:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  51:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  52:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart3;
  53:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  54:Src/stm32f1xx_it.c **** 
  55:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  56:Src/stm32f1xx_it.c **** 
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /******************************************************************************/
  59:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */
  60:Src/stm32f1xx_it.c **** /******************************************************************************/
  61:Src/stm32f1xx_it.c **** 
  62:Src/stm32f1xx_it.c **** /**
  63:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  64:Src/stm32f1xx_it.c **** */
  65:Src/stm32f1xx_it.c **** void NMI_Handler(void) {
  27              		.loc 1 65 24 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  66:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  67:Src/stm32f1xx_it.c **** 
  68:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  69:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  70:Src/stm32f1xx_it.c **** 
  71:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  72:Src/stm32f1xx_it.c **** }
  32              		.loc 1 72 1 view .LVU1
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE66:
  37              		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	1
  39              		.global	HardFault_Handler
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  44              	HardFault_Handler:
  45              	.LFB67:
ARM GAS  /tmp/cc3fsheh.s 			page 3


  73:Src/stm32f1xx_it.c **** 
  74:Src/stm32f1xx_it.c **** /**
  75:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  76:Src/stm32f1xx_it.c **** */
  77:Src/stm32f1xx_it.c **** void HardFault_Handler(void) {
  46              		.loc 1 77 30 view -0
  47              		.cfi_startproc
  48              		@ Volatile: function does not return.
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.L3:
  78:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  79:Src/stm32f1xx_it.c **** 
  80:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  81:Src/stm32f1xx_it.c ****   while(1) {
  53              		.loc 1 81 3 view .LVU3
  82:Src/stm32f1xx_it.c ****   }
  54              		.loc 1 82 3 view .LVU4
  81:Src/stm32f1xx_it.c ****   }
  55              		.loc 1 81 8 view .LVU5
  56 0000 FEE7     		b	.L3
  57              		.cfi_endproc
  58              	.LFE67:
  60              		.section	.text.MemManage_Handler,"ax",%progbits
  61              		.align	1
  62              		.global	MemManage_Handler
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  67              	MemManage_Handler:
  68              	.LFB68:
  83:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  84:Src/stm32f1xx_it.c **** 
  85:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  86:Src/stm32f1xx_it.c **** }
  87:Src/stm32f1xx_it.c **** 
  88:Src/stm32f1xx_it.c **** /**
  89:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  90:Src/stm32f1xx_it.c **** */
  91:Src/stm32f1xx_it.c **** void MemManage_Handler(void) {
  69              		.loc 1 91 30 view -0
  70              		.cfi_startproc
  71              		@ Volatile: function does not return.
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75              	.L5:
  92:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  93:Src/stm32f1xx_it.c **** 
  94:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  95:Src/stm32f1xx_it.c ****   while(1) {
  76              		.loc 1 95 3 view .LVU7
  96:Src/stm32f1xx_it.c ****   }
  77              		.loc 1 96 3 view .LVU8
  95:Src/stm32f1xx_it.c ****   }
  78              		.loc 1 95 8 view .LVU9
ARM GAS  /tmp/cc3fsheh.s 			page 4


  79 0000 FEE7     		b	.L5
  80              		.cfi_endproc
  81              	.LFE68:
  83              		.section	.text.BusFault_Handler,"ax",%progbits
  84              		.align	1
  85              		.global	BusFault_Handler
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  90              	BusFault_Handler:
  91              	.LFB69:
  97:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  98:Src/stm32f1xx_it.c **** 
  99:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 100:Src/stm32f1xx_it.c **** }
 101:Src/stm32f1xx_it.c **** 
 102:Src/stm32f1xx_it.c **** /**
 103:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 104:Src/stm32f1xx_it.c **** */
 105:Src/stm32f1xx_it.c **** void BusFault_Handler(void) {
  92              		.loc 1 105 29 view -0
  93              		.cfi_startproc
  94              		@ Volatile: function does not return.
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  98              	.L7:
 106:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 107:Src/stm32f1xx_it.c **** 
 108:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 109:Src/stm32f1xx_it.c ****   while(1) {
  99              		.loc 1 109 3 view .LVU11
 110:Src/stm32f1xx_it.c ****   }
 100              		.loc 1 110 3 view .LVU12
 109:Src/stm32f1xx_it.c ****   }
 101              		.loc 1 109 8 view .LVU13
 102 0000 FEE7     		b	.L7
 103              		.cfi_endproc
 104              	.LFE69:
 106              		.section	.text.UsageFault_Handler,"ax",%progbits
 107              		.align	1
 108              		.global	UsageFault_Handler
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 113              	UsageFault_Handler:
 114              	.LFB70:
 111:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 112:Src/stm32f1xx_it.c **** 
 113:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 114:Src/stm32f1xx_it.c **** }
 115:Src/stm32f1xx_it.c **** 
 116:Src/stm32f1xx_it.c **** /**
 117:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 118:Src/stm32f1xx_it.c **** */
 119:Src/stm32f1xx_it.c **** void UsageFault_Handler(void) {
 115              		.loc 1 119 31 view -0
ARM GAS  /tmp/cc3fsheh.s 			page 5


 116              		.cfi_startproc
 117              		@ Volatile: function does not return.
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              	.L9:
 120:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 121:Src/stm32f1xx_it.c **** 
 122:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 123:Src/stm32f1xx_it.c ****   while(1) {
 122              		.loc 1 123 3 view .LVU15
 124:Src/stm32f1xx_it.c ****   }
 123              		.loc 1 124 3 view .LVU16
 123:Src/stm32f1xx_it.c ****   }
 124              		.loc 1 123 8 view .LVU17
 125 0000 FEE7     		b	.L9
 126              		.cfi_endproc
 127              	.LFE70:
 129              		.section	.text.SVC_Handler,"ax",%progbits
 130              		.align	1
 131              		.global	SVC_Handler
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 136              	SVC_Handler:
 137              	.LFB71:
 125:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 126:Src/stm32f1xx_it.c **** 
 127:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 128:Src/stm32f1xx_it.c **** }
 129:Src/stm32f1xx_it.c **** 
 130:Src/stm32f1xx_it.c **** /**
 131:Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 132:Src/stm32f1xx_it.c **** */
 133:Src/stm32f1xx_it.c **** void SVC_Handler(void) {
 138              		.loc 1 133 24 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 134:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 135:Src/stm32f1xx_it.c **** 
 136:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 137:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 138:Src/stm32f1xx_it.c **** 
 139:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 140:Src/stm32f1xx_it.c **** }
 143              		.loc 1 140 1 view .LVU19
 144 0000 7047     		bx	lr
 145              		.cfi_endproc
 146              	.LFE71:
 148              		.section	.text.DebugMon_Handler,"ax",%progbits
 149              		.align	1
 150              		.global	DebugMon_Handler
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
ARM GAS  /tmp/cc3fsheh.s 			page 6


 155              	DebugMon_Handler:
 156              	.LFB72:
 141:Src/stm32f1xx_it.c **** 
 142:Src/stm32f1xx_it.c **** /**
 143:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 144:Src/stm32f1xx_it.c **** */
 145:Src/stm32f1xx_it.c **** void DebugMon_Handler(void) {
 157              		.loc 1 145 29 view -0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 146:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 147:Src/stm32f1xx_it.c **** 
 148:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 149:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 150:Src/stm32f1xx_it.c **** 
 151:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 152:Src/stm32f1xx_it.c **** }
 162              		.loc 1 152 1 view .LVU21
 163 0000 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE72:
 167              		.section	.text.PendSV_Handler,"ax",%progbits
 168              		.align	1
 169              		.global	PendSV_Handler
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 174              	PendSV_Handler:
 175              	.LFB73:
 153:Src/stm32f1xx_it.c **** 
 154:Src/stm32f1xx_it.c **** /**
 155:Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 156:Src/stm32f1xx_it.c **** */
 157:Src/stm32f1xx_it.c **** void PendSV_Handler(void) {
 176              		.loc 1 157 27 view -0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 158:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 159:Src/stm32f1xx_it.c **** 
 160:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 164:Src/stm32f1xx_it.c **** }
 181              		.loc 1 164 1 view .LVU23
 182 0000 7047     		bx	lr
 183              		.cfi_endproc
 184              	.LFE73:
 186              		.section	.text.SysTick_Handler,"ax",%progbits
 187              		.align	1
 188              		.global	SysTick_Handler
 189              		.syntax unified
 190              		.thumb
ARM GAS  /tmp/cc3fsheh.s 			page 7


 191              		.thumb_func
 193              	SysTick_Handler:
 194              	.LFB74:
 165:Src/stm32f1xx_it.c **** 
 166:Src/stm32f1xx_it.c **** /**
 167:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 168:Src/stm32f1xx_it.c **** */
 169:Src/stm32f1xx_it.c **** #if defined(CONTROL_PPM_LEFT) || defined(CONTROL_PPM_RIGHT)
 170:Src/stm32f1xx_it.c **** void PPM_SysTick_Callback(void);
 171:Src/stm32f1xx_it.c **** #endif
 172:Src/stm32f1xx_it.c **** 
 173:Src/stm32f1xx_it.c **** #if defined(CONTROL_PWM_LEFT) || defined(CONTROL_PWM_RIGHT)
 174:Src/stm32f1xx_it.c **** void PWM_SysTick_Callback(void);
 175:Src/stm32f1xx_it.c **** #endif
 176:Src/stm32f1xx_it.c **** 
 177:Src/stm32f1xx_it.c **** void SysTick_Handler(void) {
 195              		.loc 1 177 28 view -0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199 0000 08B5     		push	{r3, lr}
 200              	.LCFI0:
 201              		.cfi_def_cfa_offset 8
 202              		.cfi_offset 3, -8
 203              		.cfi_offset 14, -4
 178:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 179:Src/stm32f1xx_it.c **** 
 180:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 181:Src/stm32f1xx_it.c ****   HAL_IncTick();
 204              		.loc 1 181 3 view .LVU25
 205 0002 FFF7FEFF 		bl	HAL_IncTick
 206              	.LVL0:
 182:Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 207              		.loc 1 182 3 view .LVU26
 208 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 209              	.LVL1:
 183:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 184:Src/stm32f1xx_it.c **** #if defined(CONTROL_PPM_LEFT) || defined(CONTROL_PPM_RIGHT)
 185:Src/stm32f1xx_it.c ****   PPM_SysTick_Callback();
 186:Src/stm32f1xx_it.c **** #endif
 187:Src/stm32f1xx_it.c **** 
 188:Src/stm32f1xx_it.c **** #if defined(CONTROL_PWM_LEFT) || defined(CONTROL_PWM_RIGHT)
 189:Src/stm32f1xx_it.c ****   PWM_SysTick_Callback();
 190:Src/stm32f1xx_it.c **** #endif
 191:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 192:Src/stm32f1xx_it.c **** }
 210              		.loc 1 192 1 is_stmt 0 view .LVU27
 211 000a 08BD     		pop	{r3, pc}
 212              		.cfi_endproc
 213              	.LFE74:
 215              		.section	.text.DMA1_Channel2_IRQHandler,"ax",%progbits
 216              		.align	1
 217              		.global	DMA1_Channel2_IRQHandler
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 222              	DMA1_Channel2_IRQHandler:
ARM GAS  /tmp/cc3fsheh.s 			page 8


 223              	.LFB75:
 193:Src/stm32f1xx_it.c **** 
 194:Src/stm32f1xx_it.c **** #ifdef CONTROL_NUNCHUK
 195:Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
 196:Src/stm32f1xx_it.c **** void I2C1_EV_IRQHandler(void)
 197:Src/stm32f1xx_it.c **** {
 198:Src/stm32f1xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c2);
 199:Src/stm32f1xx_it.c **** }
 200:Src/stm32f1xx_it.c **** 
 201:Src/stm32f1xx_it.c **** void I2C1_ER_IRQHandler(void)
 202:Src/stm32f1xx_it.c **** {
 203:Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
 204:Src/stm32f1xx_it.c **** }
 205:Src/stm32f1xx_it.c **** 
 206:Src/stm32f1xx_it.c **** /**
 207:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel4 global interrupt.
 208:Src/stm32f1xx_it.c **** */
 209:Src/stm32f1xx_it.c **** void DMA1_Channel4_IRQHandler(void)
 210:Src/stm32f1xx_it.c **** {
 211:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 212:Src/stm32f1xx_it.c **** 
 213:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 214:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 215:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 216:Src/stm32f1xx_it.c **** 
 217:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 218:Src/stm32f1xx_it.c **** }
 219:Src/stm32f1xx_it.c **** 
 220:Src/stm32f1xx_it.c **** /**
 221:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 222:Src/stm32f1xx_it.c **** */
 223:Src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 224:Src/stm32f1xx_it.c **** {
 225:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 226:Src/stm32f1xx_it.c **** 
 227:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 228:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 229:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 230:Src/stm32f1xx_it.c **** 
 231:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 232:Src/stm32f1xx_it.c **** }
 233:Src/stm32f1xx_it.c **** #endif
 234:Src/stm32f1xx_it.c **** 
 235:Src/stm32f1xx_it.c **** #ifdef CONTROL_PPM_LEFT
 236:Src/stm32f1xx_it.c **** void EXTI3_IRQHandler(void)
 237:Src/stm32f1xx_it.c **** {
 238:Src/stm32f1xx_it.c ****   __HAL_GPIO_EXTI_CLEAR_IT(PPM_PIN);
 239:Src/stm32f1xx_it.c ****   PPM_ISR_Callback();    
 240:Src/stm32f1xx_it.c **** }
 241:Src/stm32f1xx_it.c **** #endif
 242:Src/stm32f1xx_it.c **** #ifdef CONTROL_PPM_RIGHT
 243:Src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 244:Src/stm32f1xx_it.c **** {
 245:Src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(PPM_PIN) != RESET) {
 246:Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(PPM_PIN);
 247:Src/stm32f1xx_it.c ****     PPM_ISR_Callback();
 248:Src/stm32f1xx_it.c ****   }
ARM GAS  /tmp/cc3fsheh.s 			page 9


 249:Src/stm32f1xx_it.c **** }
 250:Src/stm32f1xx_it.c **** #endif
 251:Src/stm32f1xx_it.c **** 
 252:Src/stm32f1xx_it.c **** #ifdef CONTROL_PWM_LEFT
 253:Src/stm32f1xx_it.c **** void EXTI2_IRQHandler(void)
 254:Src/stm32f1xx_it.c **** {    
 255:Src/stm32f1xx_it.c ****   __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH1);
 256:Src/stm32f1xx_it.c ****   PWM_ISR_CH1_Callback();
 257:Src/stm32f1xx_it.c **** }
 258:Src/stm32f1xx_it.c **** 
 259:Src/stm32f1xx_it.c **** void EXTI3_IRQHandler(void)
 260:Src/stm32f1xx_it.c **** {
 261:Src/stm32f1xx_it.c ****   __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH2);
 262:Src/stm32f1xx_it.c ****   PWM_ISR_CH2_Callback();    
 263:Src/stm32f1xx_it.c **** }
 264:Src/stm32f1xx_it.c **** #endif
 265:Src/stm32f1xx_it.c **** #ifdef CONTROL_PWM_RIGHT
 266:Src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 267:Src/stm32f1xx_it.c **** {
 268:Src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(PWM_PIN_CH1) != RESET) {
 269:Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH1);
 270:Src/stm32f1xx_it.c ****     PWM_ISR_CH1_Callback();
 271:Src/stm32f1xx_it.c ****   }
 272:Src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(PWM_PIN_CH2) != RESET) {
 273:Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH2);
 274:Src/stm32f1xx_it.c ****     PWM_ISR_CH2_Callback();
 275:Src/stm32f1xx_it.c ****   }
 276:Src/stm32f1xx_it.c **** }
 277:Src/stm32f1xx_it.c **** #endif
 278:Src/stm32f1xx_it.c **** 
 279:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART2) || defined(CONTROL_SERIAL_USART2) || defined(FEEDBACK_SERIAL_USART
 280:Src/stm32f1xx_it.c **** void DMA1_Channel6_IRQHandler(void)
 281:Src/stm32f1xx_it.c **** {
 282:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 283:Src/stm32f1xx_it.c **** 
 284:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 285:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_rx);
 286:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 287:Src/stm32f1xx_it.c **** 
 288:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 289:Src/stm32f1xx_it.c **** }
 290:Src/stm32f1xx_it.c **** 
 291:Src/stm32f1xx_it.c **** /**
 292:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 293:Src/stm32f1xx_it.c **** */
 294:Src/stm32f1xx_it.c **** void DMA1_Channel7_IRQHandler(void)
 295:Src/stm32f1xx_it.c **** {
 296:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 297:Src/stm32f1xx_it.c **** 
 298:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 299:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_tx);
 300:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 301:Src/stm32f1xx_it.c **** 
 302:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 303:Src/stm32f1xx_it.c **** }
 304:Src/stm32f1xx_it.c **** #endif
 305:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/cc3fsheh.s 			page 10


 306:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART3) || defined(CONTROL_SERIAL_USART3) || defined(FEEDBACK_SERIAL_USART
 307:Src/stm32f1xx_it.c **** /**
 308:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel2 global interrupt.
 309:Src/stm32f1xx_it.c ****   */
 310:Src/stm32f1xx_it.c **** void DMA1_Channel2_IRQHandler(void)
 311:Src/stm32f1xx_it.c **** {
 224              		.loc 1 311 1 is_stmt 1 view -0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228 0000 08B5     		push	{r3, lr}
 229              	.LCFI1:
 230              		.cfi_def_cfa_offset 8
 231              		.cfi_offset 3, -8
 232              		.cfi_offset 14, -4
 312:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
 313:Src/stm32f1xx_it.c **** 
 314:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 0 */
 315:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_tx);
 233              		.loc 1 315 3 view .LVU29
 234 0002 0248     		ldr	r0, .L17
 235 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 236              	.LVL2:
 316:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
 317:Src/stm32f1xx_it.c **** 
 318:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 1 */
 319:Src/stm32f1xx_it.c **** }
 237              		.loc 1 319 1 is_stmt 0 view .LVU30
 238 0008 08BD     		pop	{r3, pc}
 239              	.L18:
 240 000a 00BF     		.align	2
 241              	.L17:
 242 000c 00000000 		.word	hdma_usart3_tx
 243              		.cfi_endproc
 244              	.LFE75:
 246              		.section	.text.DMA1_Channel3_IRQHandler,"ax",%progbits
 247              		.align	1
 248              		.global	DMA1_Channel3_IRQHandler
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 253              	DMA1_Channel3_IRQHandler:
 254              	.LFB76:
 320:Src/stm32f1xx_it.c **** 
 321:Src/stm32f1xx_it.c **** /**
 322:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel3 global interrupt.
 323:Src/stm32f1xx_it.c ****   */
 324:Src/stm32f1xx_it.c **** void DMA1_Channel3_IRQHandler(void)
 325:Src/stm32f1xx_it.c **** {
 255              		.loc 1 325 1 is_stmt 1 view -0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259 0000 08B5     		push	{r3, lr}
 260              	.LCFI2:
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 3, -8
ARM GAS  /tmp/cc3fsheh.s 			page 11


 263              		.cfi_offset 14, -4
 326:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
 327:Src/stm32f1xx_it.c **** 
 328:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 0 */
 329:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_rx);
 264              		.loc 1 329 3 view .LVU32
 265 0002 0248     		ldr	r0, .L21
 266 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 267              	.LVL3:
 330:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
 331:Src/stm32f1xx_it.c **** 
 332:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 1 */
 333:Src/stm32f1xx_it.c **** }
 268              		.loc 1 333 1 is_stmt 0 view .LVU33
 269 0008 08BD     		pop	{r3, pc}
 270              	.L22:
 271 000a 00BF     		.align	2
 272              	.L21:
 273 000c 00000000 		.word	hdma_usart3_rx
 274              		.cfi_endproc
 275              	.LFE76:
 277              		.section	.text.USART3_IRQHandler,"ax",%progbits
 278              		.align	1
 279              		.global	USART3_IRQHandler
 280              		.syntax unified
 281              		.thumb
 282              		.thumb_func
 284              	USART3_IRQHandler:
 285              	.LFB77:
 334:Src/stm32f1xx_it.c **** #endif
 335:Src/stm32f1xx_it.c **** 
 336:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART2) || defined(CONTROL_SERIAL_USART2) || defined(FEEDBACK_SERIAL_USART
 337:Src/stm32f1xx_it.c **** /**
 338:Src/stm32f1xx_it.c ****   * @brief This function handles USART2 global interrupt.
 339:Src/stm32f1xx_it.c ****   */
 340:Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
 341:Src/stm32f1xx_it.c **** {
 342:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 343:Src/stm32f1xx_it.c **** 
 344:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 345:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 346:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 347:Src/stm32f1xx_it.c ****   if(RESET != __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_IDLE)) {  // Check for IDLE line interrupt
 348:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart2);                         // Clear IDLE line flag (otherwis
 349:Src/stm32f1xx_it.c ****       usart2_rx_check();                                          // Check for data to process
 350:Src/stm32f1xx_it.c ****   }
 351:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 352:Src/stm32f1xx_it.c **** }
 353:Src/stm32f1xx_it.c **** #endif
 354:Src/stm32f1xx_it.c **** 
 355:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART3) || defined(CONTROL_SERIAL_USART3) || defined(FEEDBACK_SERIAL_USART
 356:Src/stm32f1xx_it.c **** /**
 357:Src/stm32f1xx_it.c ****   * @brief This function handles USART3 global interrupt.
 358:Src/stm32f1xx_it.c ****   */
 359:Src/stm32f1xx_it.c **** void USART3_IRQHandler(void)
 360:Src/stm32f1xx_it.c **** {
 286              		.loc 1 360 1 is_stmt 1 view -0
ARM GAS  /tmp/cc3fsheh.s 			page 12


 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 8
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290 0000 10B5     		push	{r4, lr}
 291              	.LCFI3:
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 4, -8
 294              		.cfi_offset 14, -4
 295 0002 82B0     		sub	sp, sp, #8
 296              	.LCFI4:
 297              		.cfi_def_cfa_offset 16
 361:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 362:Src/stm32f1xx_it.c **** 
 363:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 364:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart3);
 298              		.loc 1 364 3 view .LVU35
 299 0004 0A4C     		ldr	r4, .L27
 300 0006 2046     		mov	r0, r4
 301 0008 FFF7FEFF 		bl	HAL_UART_IRQHandler
 302              	.LVL4:
 365:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 366:Src/stm32f1xx_it.c ****   if(RESET != __HAL_UART_GET_IT_SOURCE(&huart3, UART_IT_IDLE)) {  // Check for IDLE line interrupt 
 303              		.loc 1 366 3 view .LVU36
 304              		.loc 1 366 15 is_stmt 0 view .LVU37
 305 000c 2368     		ldr	r3, [r4]
 306 000e DA68     		ldr	r2, [r3, #12]
 307              		.loc 1 366 5 view .LVU38
 308 0010 12F0100F 		tst	r2, #16
 309 0014 01D1     		bne	.L26
 310              	.L23:
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 368:Src/stm32f1xx_it.c ****       usart3_rx_check();                                          // Check for data to process
 369:Src/stm32f1xx_it.c ****   }
 370:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 371:Src/stm32f1xx_it.c **** }
 311              		.loc 1 371 1 view .LVU39
 312 0016 02B0     		add	sp, sp, #8
 313              	.LCFI5:
 314              		.cfi_remember_state
 315              		.cfi_def_cfa_offset 8
 316              		@ sp needed
 317 0018 10BD     		pop	{r4, pc}
 318              	.L26:
 319              	.LCFI6:
 320              		.cfi_restore_state
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 321              		.loc 1 367 7 is_stmt 1 view .LVU40
 322              	.LBB2:
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 323              		.loc 1 367 7 view .LVU41
 324 001a 0022     		movs	r2, #0
 325 001c 0192     		str	r2, [sp, #4]
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 326              		.loc 1 367 7 view .LVU42
 327 001e 1A68     		ldr	r2, [r3]
 328 0020 0192     		str	r2, [sp, #4]
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
ARM GAS  /tmp/cc3fsheh.s 			page 13


 329              		.loc 1 367 7 view .LVU43
 330 0022 5B68     		ldr	r3, [r3, #4]
 331 0024 0193     		str	r3, [sp, #4]
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 332              		.loc 1 367 7 view .LVU44
 333 0026 019B     		ldr	r3, [sp, #4]
 334              	.LBE2:
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 335              		.loc 1 367 7 view .LVU45
 368:Src/stm32f1xx_it.c ****   }
 336              		.loc 1 368 7 view .LVU46
 337 0028 FFF7FEFF 		bl	usart3_rx_check
 338              	.LVL5:
 339              		.loc 1 371 1 is_stmt 0 view .LVU47
 340 002c F3E7     		b	.L23
 341              	.L28:
 342 002e 00BF     		.align	2
 343              	.L27:
 344 0030 00000000 		.word	huart3
 345              		.cfi_endproc
 346              	.LFE77:
 348              		.text
 349              	.Letext0:
 350              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 351              		.file 3 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 352              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 353              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 354              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 355              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 356              		.file 8 "Inc/util.h"
 357              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 358              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/cc3fsheh.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_it.c
     /tmp/cc3fsheh.s:19     .text.NMI_Handler:00000000 $t
     /tmp/cc3fsheh.s:25     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/cc3fsheh.s:38     .text.HardFault_Handler:00000000 $t
     /tmp/cc3fsheh.s:44     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/cc3fsheh.s:61     .text.MemManage_Handler:00000000 $t
     /tmp/cc3fsheh.s:67     .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/cc3fsheh.s:84     .text.BusFault_Handler:00000000 $t
     /tmp/cc3fsheh.s:90     .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/cc3fsheh.s:107    .text.UsageFault_Handler:00000000 $t
     /tmp/cc3fsheh.s:113    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/cc3fsheh.s:130    .text.SVC_Handler:00000000 $t
     /tmp/cc3fsheh.s:136    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/cc3fsheh.s:149    .text.DebugMon_Handler:00000000 $t
     /tmp/cc3fsheh.s:155    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/cc3fsheh.s:168    .text.PendSV_Handler:00000000 $t
     /tmp/cc3fsheh.s:174    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/cc3fsheh.s:187    .text.SysTick_Handler:00000000 $t
     /tmp/cc3fsheh.s:193    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/cc3fsheh.s:216    .text.DMA1_Channel2_IRQHandler:00000000 $t
     /tmp/cc3fsheh.s:222    .text.DMA1_Channel2_IRQHandler:00000000 DMA1_Channel2_IRQHandler
     /tmp/cc3fsheh.s:242    .text.DMA1_Channel2_IRQHandler:0000000c $d
     /tmp/cc3fsheh.s:247    .text.DMA1_Channel3_IRQHandler:00000000 $t
     /tmp/cc3fsheh.s:253    .text.DMA1_Channel3_IRQHandler:00000000 DMA1_Channel3_IRQHandler
     /tmp/cc3fsheh.s:273    .text.DMA1_Channel3_IRQHandler:0000000c $d
     /tmp/cc3fsheh.s:278    .text.USART3_IRQHandler:00000000 $t
     /tmp/cc3fsheh.s:284    .text.USART3_IRQHandler:00000000 USART3_IRQHandler
     /tmp/cc3fsheh.s:344    .text.USART3_IRQHandler:00000030 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_DMA_IRQHandler
hdma_usart3_tx
hdma_usart3_rx
HAL_UART_IRQHandler
usart3_rx_check
huart3
